<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>台场限定结晶兽</title>
      <link href="/%E5%8F%B0%E5%9C%BA%E9%99%90%E5%AE%9A%E7%BB%93%E6%99%B6%E5%85%BD.html"/>
      <url>/%E5%8F%B0%E5%9C%BA%E9%99%90%E5%AE%9A%E7%BB%93%E6%99%B6%E5%85%BD.html</url>
      <content type="html"><![CDATA[<p><img src="/images/post/title.jpg" alt="title"></p><blockquote><p>朋友送的生日礼物，录了制作视频作为纪念。</p></blockquote><a id="more"></a><h1 id="制作视频"><a href="#制作视频" class="headerlink" title="制作视频"></a>制作视频</h1><center><iframe width="100%" height="400" src="https://player.bilibili.com/player.html?aid=31505056&cid=55077365&page=1" frameborder="0" framespacing="0" allowfullscreen="true"></iframe></center><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>实物的观感远比图片惊艳，实物颜色是那种非常通透的翠绿色。白色外甲为珠光色，有比较明显的水纹，但是由于HG的大小，外加遍布全身的结晶的衬托，整体观感非常好。</p><p><img src="/images/post/unicorn-luminous-hg-00005.jpg" alt="unicorn-luminous-hg-00005"></p><p><img src="/images/post/unicorn-luminous-hg-00003.jpg" alt="unicorn-luminous-hg-00003"></p><p><img src="/images/post/unicorn-luminous-hg-00001.jpg" alt="unicorn-luminous-hg-00001"></p><p><img src="/images/post/unicorn-luminous-hg-00002.jpg" alt="unicorn-luminous-hg-00002"></p>]]></content>
      
      <categories>
          
          <category> 高达模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结晶兽 </tag>
            
            <tag> 台场限定 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BANDAI MG RX78 3.0</title>
      <link href="/bandai-mg-rx78-3-0.html"/>
      <url>/bandai-mg-rx78-3-0.html</url>
      <content type="html"><![CDATA[<p><img src="/images/post/15383098008533.jpg" alt=""><br>几个月前入手的万代 MG 元祖，非常喜欢这款3.0版的造型，相比前代追加了很多刻线细节，整体比例也有所调整。前前后后花了一周搞定。虽然没有喷漆，但是经过一些局部补色，胶贴修边处理，以及最后的半消光漆处理，整体效果也很不错。在此分享下。<br><a id="more"></a></p><p><img src="/images/post/rx78-3-mg-by-df-00001.jpg" alt="rx78-3-mg-by-df-00001"></p><p><img src="/images/post/rx78-3-mg-by-df-00013.jpg" alt="rx78-3-mg-by-df-00013"></p><p><img src="/images/post/rx78-3-mg-by-df-00002.jpg" alt="rx78-3-mg-by-df-00002"></p><p><img src="/images/post/rx78-3-mg-by-df-00014.jpg" alt="rx78-3-mg-by-df-00014"></p><p><img src="/images/post/rx78-3-mg-by-df-00011.jpg" alt="rx78-3-mg-by-df-00011"></p><p><img src="/images/post/rx78-3-mg-by-df-00015.jpg" alt="rx78-3-mg-by-df-00015"></p><p><img src="/images/post/rx78-3-mg-by-df-00008.jpg" alt="rx78-3-mg-by-df-00008"></p><p><img src="/images/post/rx78-3-mg-by-df-00012.jpg" alt="rx78-3-mg-by-df-00012"></p><p><img src="/images/post/rx78-3-mg-by-df-00007.jpg" alt="rx78-3-mg-by-df-00007"></p><p><img src="/images/post/rx78-3-mg-by-df-00006.jpg" alt="rx78-3-mg-by-df-00006"></p><p><img src="/images/post/rx78-3-mg-by-df-00004.jpg" alt="rx78-3-mg-by-df-00004"></p><p><img src="/images/post/rx78-3-mg-by-df-00010.jpg" alt="rx78-3-mg-by-df-00010"></p><p><img src="/images/post/rx78-3-mg-by-df-00005.jpg" alt="rx78-3-mg-by-df-00005"></p><p><img src="/images/post/rx78-3-mg-by-df-00009.jpg" alt="rx78-3-mg-by-df-00009"></p><p><img src="/images/post/rx78-3-mg-by-df-00017.jpg" alt="rx78-3-mg-by-df-00017"> </p><p><img src="/images/post/rx78-3-mg-by-df-00016.jpg" alt="rx78-3-mg-by-df-00016"></p><p><img src="/images/post/rx78-3-mg-by-df-00003.jpg" alt="rx78-3-mg-by-df-00003"></p>]]></content>
      
      <categories>
          
          <category> 高达模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RX78 3.0 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-908. 最小差值 I | Smallest Range I | max()</title>
      <link href="/leetcode-908-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC-i-smallest-range-i-max.html"/>
      <url>/leetcode-908-%E6%9C%80%E5%B0%8F%E5%B7%AE%E5%80%BC-i-smallest-range-i-max.html</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/smallest-range-i/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，我们可以选择任意 <code>x</code> 满足 <code>-K &lt;= x &lt;= K</code>，并将 x 加到 <code>A[i]</code> 中。<br>在此过程之后，我们得到一些数组 <code>B</code>。<br>返回 <code>B</code> 的最大值和 <code>B</code> 的最小值之间可能存在的最小差值。</p><p>在此过程之后，我们得到一些数组 B。</p><p>返回 B 的最大值和 B 的最小值之间可能存在的最小差值。</p><p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [1], K = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：B = [1]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>示例 2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [0,10], K = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：B = [2,8]</span><br></pre></td></tr></table></figure></p><p>示例 3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [1,3,6], K = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：B = [3,3,3] 或 B = [4,4,4]</span><br></pre></td></tr></table></figure></p><p>提示：</p><ol><li><code>1 &lt;= A.length &lt;= 10000</code></li><li><code>0 &lt;= A[i] &lt;= 10000</code></li><li><code>0 &lt;= K &lt;= 10000</code></li></ol><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于题目中说可以选择 <code>-k</code> 到 <code>k</code> 之间的任意 <code>x</code>，所以，我们就可以对 <code>A[i]</code> 进行最大 <code>+x</code> 或者 <code>-x</code> 的处理，所以就可以影响数组A中元素之间大小为 <code>2x</code> 的差值，当两个元素小于 <code>2x</code> 时，我们可以使其差值变为0，当差值大 <code>2x</code> 时，可以使差值最大缩小为 <code>A[i]-A[j]-2x</code>。</p><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestRangeI</span><span class="params">(self, A, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = max(A) - min(A)</span><br><span class="line">        y = <span class="number">2</span> * K</span><br><span class="line">        <span class="keyword">if</span> x &lt;= y:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> x - y</span><br></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>上面方法的简写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestRangeI</span><span class="params">(self, A, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> max(<span class="number">0</span>,max(A)-min(A)<span class="number">-2</span>*K)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="Python-max-函数"><a href="#Python-max-函数" class="headerlink" title="Python max()函数"></a>Python max()函数</h4><p><a href="https://docs.python.org/3.6/library/functions.html#max" target="_blank" rel="noopener">官方文档链接</a></p><p><code>max(iterable, *[, key, default])</code><br><code>max(arg1, arg2, *args[, key])</code></p><p>max()方法返回给定迭代中的最大值，或者返回多个给定参数中最大的参数：</p><blockquote><p>注意：</p><ul><li>可以是任何<code>同类型</code>的元素，比如多个列表，多个字符串等</li><li>如果给定单个非迭代参数，会报错</li><li>给出的迭代为空时，如果没有指定default参数，会报错</li></ul></blockquote><h5 id="key："><a href="#key：" class="headerlink" title="key："></a>key：</h5><p>可以提供一个匿名函数用来对需要进行比较的内容进行预处理。例如调整大小写，或者指定比较一个多个元祖的第几个元素等。<br>更多匿名函数的内容，可以参考：</p><ul><li>我另外一篇blog总结：<a href="https://nsdf.top/leetcode-905-按奇偶校验排序数组-sort-array-by-parity-list-sort-lambda.html#2-匿名函数：">按奇偶校验排序数组 #匿名函数</a></li><li>Python官方文档：<a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" target="_blank" rel="noopener">lambda-expressions</a></li></ul><h5 id="default"><a href="#default" class="headerlink" title="default:"></a>default:</h5><p>就是当提供的单一迭代参数为空时，所指定的默认返回值。如果没有指定的话，则报错ValueError。<br>例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default参数的使用</span></span><br><span class="line">C = []</span><br><span class="line">print(max(C, default=<span class="string">'DF'</span>))</span><br><span class="line">------------</span><br><span class="line">结果：</span><br><span class="line">DF</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 不指定default</span><br><span class="line">C = []</span><br><span class="line">print(max(C))</span><br><span class="line">-------------</span><br><span class="line">发生异常: ValueError</span><br><span class="line">max() arg is an empty sequence</span><br></pre></td></tr></table></figure><p>还有一份蛮不错的笔记，转载一下：<br>来自 RUNOOB.COM 的笔记：<a href="http://www.runoob.com/python/func-number-max.html" target="_blank" rel="noopener">http://www.runoob.com/python/func-number-max.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'1,2,3,4'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)             <span class="comment">#类型为字符串</span></span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)              <span class="comment">#max 返回了最大值</span></span><br><span class="line"><span class="string">'4'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)             <span class="comment">#类型是列表</span></span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)              <span class="comment">#max函数也返回了最大值</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>)]                <span class="comment">#假设列表里面是元组构成元素呢</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)                                     <span class="comment">#按照元素里面元组的第一个元素的排列顺序，输出最大值（如果第一个元素相同，则比较第二个元素，输出最大值）据推理是按ascii码进行排序的</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'A'</span>,<span class="number">1</span>)]                     <span class="comment">#实验推测是按ascii码进行排序，比较  a  和   A 的值，得出a &gt; A   ,  因为ascii 码里面，按照排列顺序 小 a在 A的后面</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>)]                <span class="comment">#列表里面的元素都由元组构成，元组都由数字组成，输出最大值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">'b'</span>),(<span class="string">'a'</span>,<span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">'b'</span>),(<span class="string">'a'</span>,<span class="number">1</span>),(<span class="string">'f'</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line">(<span class="string">'f'</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">2</span>,<span class="number">3</span>:<span class="number">1</span>,<span class="number">4</span>:<span class="string">'aa'</span>&#125;                  <span class="comment">#比较字典里面的最大值，会输出最大的键值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(a)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Python Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode-Easy </tag>
            
            <tag> Python 內建函数 max() </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转载 | 危险的 target=&quot;_blank&quot; 与 “opener”</title>
      <link href="/%E8%BD%AC%E8%BD%BD-%E5%8D%B1%E9%99%A9%E7%9A%84-target-blank-%E4%B8%8E-%E2%80%9Copener%E2%80%9D.html"/>
      <url>/%E8%BD%AC%E8%BD%BD-%E5%8D%B1%E9%99%A9%E7%9A%84-target-blank-%E4%B8%8E-%E2%80%9Copener%E2%80%9D.html</url>
      <content type="html"><![CDATA[<p><img src="https://knownsec-fed.com/static/header-b2d5797f97e9d99eadd2357194ee34da-d6978.jpeg" alt=""></p><blockquote><p>在网页中使用链接时，如果想要让浏览器自动在新的标签页打开指定的地址，通常的做法就是在 a 标签上添加 target等于”_blank” 属性。</p><p>然而，就是这个属性，为钓鱼攻击者带来了可乘之机。</p></blockquote><a id="more"></a><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><h2 id="parent-与-opener"><a href="#parent-与-opener" class="headerlink" title="parent 与 opener"></a>parent 与 opener</h2><p>在说 <code>opener</code> 之前，可以先聊聊 <code>&lt;iframe&gt;</code> 中的 <code>parent</code>。</p><p>我们知道，在 <code>&lt;iframe&gt;</code> 中提供了一个用于父子页面交互的对象，叫做 window.parent，我们可以通过 window.parent 对象来从框架中的页面访问父级页面的 window。</p><p><code>opener</code> 与 <code>parent</code> 一样，只不过是用于 <code>&lt;a target=&quot;_blank&quot;&gt;</code> 在新标签页打开的页面的。通过 <code>&lt;a target=&quot;_blank&quot;&gt;</code> 打开的页面，可以直接使用 <code>window.opener</code> 来访问来源页面的 <code>window</code> 对象。</p><h2 id="同域与跨域"><a href="#同域与跨域" class="headerlink" title="同域与跨域"></a>同域与跨域</h2><p>浏览器提供了完整的跨域保护，在域名相同时，<code>parent</code> 对象和 <code>opener</code> 对象实际上就直接是上一级的 <code>window</code> 对象；而当域名不同时，<code>parent</code> 和 <code>opener</code> 则是经过包装的一个 <code>global</code> 对象。这个 <code>global</code> 对象仅提供非常有限的属性访问，并且在这仅有的几个属性中，大部分也都是不允许访问的（访问会直接抛出 <code>DOMException</code>）。<br><img src="https://knownsec-fed.com/static/same-b0119f9d1839c8a2a30132fac8ccfed1-67abc.png" alt=""><img src="https://knownsec-fed.com/static/cross-c634dd4e086fcbb57b8fca08e8075337-67abc.png" alt=""></p><p>在 <code>&lt;iframe&gt;</code> 中，提供了一个 <code>sandbox</code> 属性用于控制框架中的页面的权限，因此即使是同域，也可以控制 <code>&lt;iframe&gt;</code> 的安全性。</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>如果，你的网站上有一个链接，使用了 <code>target=&quot;_blank&quot;</code>，那么一旦用户点击这个链接并进入一个新的标签，新标签中的页面如果存在恶意代码，就可以将你的网站直接导航到一个虚假网站。此时，如果用户回到你的标签页，看到的就是被替换过的页面了。</p><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><ol><li><p>在你的网站 <code>https://example.com</code> 上存在一个链接：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://an.evil.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>进入一个“邪恶”的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>用户点击了这个链接，在新的标签页打开了这个网站。这个网站可以通过 HTTP Header 中的 Referer 属性来判断用户的来源。<br> 并且，这个网站上包含着类似于这样的 JavaScript 代码：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const url = encodeURIComponent('&#123;&#123;header.referer&#125;&#125;');</span><br><span class="line">window.opener.location.replace('https://a.fake.site/?' + url);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>此时，用户在继续浏览这个新的标签页，而原来的网站所在的标签页此时已经被导航到了 <code>https://a.fake.site/?https%3A%2F%2Fexample.com%2F</code>。</p></li><li><p>恶意网站 <code>https://a.fake.site</code> 根据 <code>Query String</code> 来伪造一个足以欺骗用户的页面，并展示出来（期间还可以做一次跳转，使得浏览器的地址栏更具有迷惑性）。</p></li><li><p>用户关闭 <code>https://an.evil.site</code> 的标签页，回到原来的网站………………已经回不去了。</p></li></ol><blockquote><p>上面的攻击步骤是在跨域的情况下的，在跨域情况下，opener 对象和 parent 一样，是受到限制的，仅提供非常有限的属性访问，并且在这仅有的几个属性中，大部分也都是不允许访问的（访问会直接抛出 DOMException）。</p></blockquote><blockquote><p>但是与 parent 不同的是，在跨域的情况下，opener 仍然可以调用 location.replace 方法而 parent 则不可以。</p></blockquote><blockquote><p>如果是在同域的情况下（比如一个网站上的某一个页面被植入了恶意代码），则情况要比上面严重得多。</p></blockquote><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p><code>&lt;iframe&gt;</code> 中有 <code>sandbox</code> 属性，而链接，则可以使用下面的办法： </p><h2 id="1-Referrer-Policy-和-noreferrer"><a href="#1-Referrer-Policy-和-noreferrer" class="headerlink" title="1. Referrer Policy 和 noreferrer"></a>1. Referrer Policy 和 noreferrer</h2><p>上面的攻击步骤中，用到了 <code>HTTP Header</code> 中的 <code>Referer</code> 属性，实际上可以在 <code>HTTP</code> 的响应头中增加 <code>Referrer Policy</code> 头来保证来源隐私安全。</p><p><code>Referrer Policy</code> 需要修改后端代码来实现，而在前端，也可以使用 <code>&lt;a&gt;</code> 标签的 <code>rel</code> 属性来指定 <code>rel=&quot;noreferrer&quot;</code> 来保证来源隐私安全。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://an.evil.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noreferrer"</span>&gt;</span>进入一个“邪恶”的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>但是要注意的是：即使限制了 referer 的传递，仍然不能阻止原标签被恶意跳转。</p></blockquote><h2 id="2-noopener"><a href="#2-noopener" class="headerlink" title="2. noopener"></a>2. noopener</h2><p>为了安全，现代浏览器都支持在 <code>&lt;a&gt;</code> 标签的 <code>rel</code> 属性中指定 <code>rel=&quot;noopener&quot;</code>，这样，在打开的新标签页中，将无法再使用 <code>opener</code> 对象了，它为设置为了 <code>null</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://an.evil.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener"</span>&gt;</span>进入一个“邪恶”的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-JavaScript"><a href="#3-JavaScript" class="headerlink" title="3. JavaScript"></a>3. JavaScript</h2><p><code>noopener</code> 属性看似是解决了所有问题，但是…浏览器的兼容性问题…</p><p><img src="https://knownsec-fed.com/static/caniuse-93575c220af3d268563890501021a14f-abe1c.png" alt=""></p><p>可以看到，现在绝大多数浏览器都已经兼容了 <code>rel=&quot;noopener&quot;</code> 属性了。但是，为了保护稍旧的“近代”浏览器或是很旧的“古代”浏览器甚至是“远古”浏览器，只有 <code>noopener</code> 属性还是远远不够的。</p><p>这时，就只能请出下面这段原生 JavaScript 来帮忙了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openUrl</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newTab = <span class="built_in">window</span>.open();</span><br><span class="line">  newTab.opener = <span class="literal">null</span>;</span><br><span class="line">  newTab.location = url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>首先，在网站中的链接上，如果使用了 <code>target=&quot;_blank&quot;</code>，就要带上 <code>rel=&quot;noopener&quot;</code>，并且建议带上 <code>rel=&quot;noreferrer&quot;</code>。类似于这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://an.evil.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener noreferrer"</span>&gt;</span>进入一个“邪恶”的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，在跳转到第三方网站的时候，为了 SEO 权重，还建议带上 <code>rel=&quot;nofollow&quot;</code>，所以最终类似于这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://an.evil.site"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener noreferrer nofollow"</span>&gt;</span>进入一个“邪恶”的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>最后，再来说说性能问题。</p><p>如果网站使用了 <code>&lt;a target=&quot;_blank&quot;&gt;</code>，那么新打开的标签页的性能将会影响到当前页面。此时如果新打开的页面中执行了一个非常庞大的 JavaScript 脚本，那么原始标签页也会受到影响，会出现卡顿的现象（当然不至于卡死）。</p><p>而如果在链接中加入了 <code>noopener</code>，则此时两个标签页将会互不干扰，使得原页面的性能不会受到新页面的影响。</p><blockquote><p><strong>本文转自: <a href="https://knownsec-fed.com/2018-03-01-wei-xian-de-targetblank-yu-opener/" target="_blank" rel="noopener">创宇前端: 危险的 target=”_blank” 与 “opener”</a> 作者: jinliming2</strong></p></blockquote>]]></content>
      
      <categories>
          
          <category> Web技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> target= </tag>
            
            <tag> web安全 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-905. 按奇偶校验排序数组 | Sort Array By Parity | list.sort(),lambda</title>
      <link href="/leetcode-905-%E6%8C%89%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-sort-array-by-parity-list-sort-lambda.html"/>
      <url>/leetcode-905-%E6%8C%89%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-sort-array-by-parity-list-sort-lambda.html</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/sort-array-by-parity/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个非负整数数组 A，返回一个由 A 的所有偶数元素组成的数组，后面跟 A 的所有奇数元素。</p><p>你可以返回满足此条件的任何数组作为答案。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[3,1,2,4]</span><br><span class="line">输出：[2,4,3,1]</span><br><span class="line">输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。</span><br></pre></td></tr></table></figure><p>提示：</p><ol><li><code>1 &lt;= A.length &lt;= 5000</code></li><li><code>0 &lt;= A[i] &lt;= 5000</code></li></ol><a id="more"></a><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于没有多余的要求，只需要建立一个数组B，通过循环对A的元素进行奇偶校验，然后根据元素为奇数或者偶数，分别插入到数组的尾部或者头部即可。</p><p>另外一种方式，就是通过while循环，直接对数组A进行原地修改。</p><p>最后，还可以利用python的sort()函数，对数组A进行排序。</p><h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">方式一：直接根据元素的奇偶，插入到数组B的首部或尾部即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        B = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> A:</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                B.insert(<span class="number">0</span>,i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                B.insert(len(B),i)</span><br><span class="line">        <span class="keyword">return</span> B</span><br></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">方法二: 使用while,原地修改A数组,将数组中奇数元素移动到数组末端</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = len(A)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> A[i] % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                A.append(A.pop(i))</span><br><span class="line">                x-=<span class="number">1</span>  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x -= <span class="number">1</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure><h3 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type A: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        方法三：使用sort()方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        A.sort(key=<span class="keyword">lambda</span> num:num%<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">        <span class="comment"># return sorted(A,key=lambda num:num%2)</span></span><br></pre></td></tr></table></figure><blockquote><p>这里涉及两个知识点：</p><ul><li><code>list.sort()</code></li><li>匿名函数（lambda）</li></ul></blockquote><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点:"></a>知识点:</h2><h3 id="1-list-sort"><a href="#1-list-sort" class="headerlink" title="1. list.sort()"></a>1. list.sort()</h3><p><strong>参考：</strong></p><p>官方文档：<a href="https://docs.python.org/3/howto/sorting.html" target="_blank" rel="noopener">https://docs.python.org/3/howto/sorting.html</a><br>RUNOOB：<a href="http://www.runoob.com/python/att-list-sort.html" target="_blank" rel="noopener">http://www.runoob.com/python/att-list-sort.html</a><br>廖雪峰Python教程： <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318230588782cac105d0d8a40c6b450a232748dc854000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/…</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(cmp=None, key=None, reverse=False)</span><br></pre></td></tr></table></figure><p><strong>一些基础知识：</strong></p><ol><li>list.sort() 永久排序， sorted(list) 非永久排序。</li><li><p>list.sort() 只能用于数组，而 sorted() 可以用于所有迭代类型。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    &gt;&gt;&gt; sorted(&#123;<span class="number">1</span>: <span class="string">'D'</span>, <span class="number">2</span>: <span class="string">'B'</span>, <span class="number">3</span>: <span class="string">'B'</span>, <span class="number">4</span>: <span class="string">'E'</span>, <span class="number">5</span>: <span class="string">'A'</span>&#125;)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>reverse参数，控制排序的循序，默认为false。当reverse=True时，为倒序排序。</p></li></ol><p><strong>key 参数的功能</strong></p><p><code>sort()</code> 和 <code>sorted()</code> 都拥有的一个 <code>key</code> 参数，通过指定在进行比较之前对每个列表元素调用的函数，以实现自定义排序。</p><p>通过key参数，可以实现例如：</p><ul><li>以一个复合列表中元素的第i个元素的值为依据进行排序</li><li>以忽略大小写的方式，对字符串进行排序</li><li>比较数组元素绝对值的大小</li><li>本题中，对数组进行奇偶校验排序</li><li>……</li></ul><p>下面是几个例子：</p><ul><li><p>例1：忽略大小写排序（引用自官方文档）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(<span class="string">"This is a test string from Andrew"</span>.split(), key=str.lower)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'Andrew'</span>, <span class="string">'from'</span>, <span class="string">'is'</span>, <span class="string">'string'</span>, <span class="string">'test'</span>, <span class="string">'This'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>通过指定str.lower 使得在排序前，先将列表中的元素转换为了小写。</p></blockquote></li><li><p>例2：对数组绝对值进行排序（引用自廖旭峰的python教程）</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>])</span><br><span class="line">[<span class="number">-21</span>, <span class="number">-12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure></li><li><p>例3：对一个保存学生信息的列表，按照学生年龄进行排序。（引用自官方文档）</p><ul><li><p>每个学生信息存储在一个子列表中</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student_tuples = [</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line"><span class="meta">... </span>    (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_tuples, key=<span class="keyword">lambda</span> student: student[<span class="number">2</span>])   <span class="comment"># sort by age</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure></li><li><p>每个学生信息存储在学生对象中：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, grade, age)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.grade = grade</span><br><span class="line"><span class="meta">... </span>        self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> repr((self.name, self.grade, self.age))</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>student_objects = [</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line"><span class="meta">... </span>    Student(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(student_objects, key=<span class="keyword">lambda</span> student: student.age)   <span class="comment"># sort by age</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>排序稳定性和复合排序</strong><br>排序首先保证稳定，当多个元素（每个元素具有多个值）用于比较的项目的值相同时，会保留它们的原始顺序。这个有点可以在让python方便的进行复合排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先对年龄进行升序排序，然后再对成绩进行降序排序。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = sorted(student_objects, key=attrgetter(<span class="string">'age'</span>))     <span class="comment"># sort on secondary key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(s, key=attrgetter(<span class="string">'grade'</span>), reverse=<span class="keyword">True</span>)       <span class="comment"># now sort on primary key, descending</span></span><br><span class="line">[(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>), (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>), (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>例子来自官方文档</p></blockquote><p><strong>python2中使用的cmp参数</strong></p><p>这部分的官方文档链接：<a href="https://docs.python.org/3/howto/sorting.html#the-old-way-using-the-cmp-parameter" target="_blank" rel="noopener">https://docs.python.org/3/howto/sorting.html#the-old-way-using-the-cmp-parameter</a></p><p>python2.x版本，提供了cmp参数，提供用于进行比较的相关功能。简单来书就是建立一个比较函数，通过返回值（大于0的数，等于0，小于0的数）来控制排序。<br>引用官方文档中给出的比较数字大小的例子</p><ul><li><p>按照正序排列数组：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">numeric_compare</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x - y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], cmp=numeric_compare) </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p>按照倒序排列数组：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reverse_numeric</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> y - x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], cmp=reverse_numeric) </span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ul><p>在python3中cmp已经被完全移除了，如果取而代之的是key参数。<br>如果需要将python2的代码转到python3，只需使用下面的包装器，对适用于cmp的函数进行处理，使其适用于key即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmp_to_key</span><span class="params">(mycmp)</span>:</span></span><br><span class="line">    <span class="string">'Convert a cmp= function into a key= function'</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">K</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj, *args)</span>:</span></span><br><span class="line">            self.obj = obj</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt; <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) == <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &lt;= <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) &gt;= <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> mycmp(self.obj, other.obj) != <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> K</span><br></pre></td></tr></table></figure><p>要转换为key方法，只需要对原来的函数进行包装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], key=cmp_to_key(reverse_numeric))</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>在python3.2中，<a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" title="functools.cmp_to_key" target="_blank" rel="noopener"><code>functools.cmp_to_key()</code></a>函数已经添加到了基础库的 <a href="https://docs.python.org/3/library/functools.html#module-functools" title="functools: Higher-order functions and operations on callable objects." target="_blank" rel="noopener"><code>functools</code></a> 模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numeric_compare</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(sorted(nums, key=functools.cmp_to_key(numeric_compare)))</span><br><span class="line"></span><br><span class="line">---结果---</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="2-匿名函数："><a href="#2-匿名函数：" class="headerlink" title="2. 匿名函数："></a>2. 匿名函数：</h3><p>官方文档：<a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions</a></p><p>直接用一个例子来解释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">print(sorted(A,key=<span class="keyword">lambda</span> num:num%<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>就相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evenNumber</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(sorted(A, key=evenNumber))</span><br></pre></td></tr></table></figure><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>需要跟多的去阅读相关语言的文档，解题中遇到的很多问题，在对文档有了更多的了解后，会更容易解决。</p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Python Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> LeetCode-Easy </tag>
            
            <tag> Python 排序函数 list.sort() </tag>
            
            <tag> Python 匿名函数 lambda </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-189. 旋转数组 | Rotate Array</title>
      <link href="/leetcode-189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84-rotate-array.html"/>
      <url>/leetcode-189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84-rotate-array.html</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/rotate-array" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5,6,7] 和 k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>说明:<br>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>要求使用空间复杂度为 O(1) 的原地算法。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="分析-amp-思路"><a href="#分析-amp-思路" class="headerlink" title="分析 &amp; 思路"></a>分析 &amp; 思路</h3><p>题目为把数组向右移动k个位置，其实就相当于将数组的最后一个元素移动至数组首位，循环k次。同时由于题中没有给定k和nums的长度，所以要考虑到这两者长度的问题以及关系：</p><ul><li>k = 0</li><li>len(nums) &lt;=1</li><li>k &gt; len(nums)<br>当 k 大于数组的长度时，如果直接循环，多循环的几轮是没有意义的，所以只需要循环 k%len(nums) 次即可。 同时，由于是不断的将数组末端的值放至数组前端，所以也就是将数组末尾的k个值拼接到剩余元素的前端。</li></ul><p>通过以上思路，有两种方式：</p><ol><li>循环</li><li>利用切片进行修改</li></ol><hr><p>第三种思路是直接对数组通过三次翻转来解决，首先将整个数组翻转, 然后将需要前k个元素进行翻转，然后将剩下的部分翻转，这样也相当于完成了k个位置的循环。同样，这里也要考虑k大于数组长度的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [1, 2, 3, 4, 5, 6, 7] 和 k = 3</span><br><span class="line">输出: [5, 6, 7, 1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">翻转整个列表: [7, 6, 5, 4, 3, 2, 1]</span><br><span class="line">将前k个元素翻转: [5, 6, 7, 4, 3, 2, 1]</span><br><span class="line">将剩余元素翻转: [5, 6, 7, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><p>翻转整个列表，可以使用python内置的reverse函数解决。翻转部分列表，需要自定义一个函数。</p><h3 id="方式一-循环-："><a href="#方式一-循环-：" class="headerlink" title="方式一(循环)："></a>方式一(循环)：</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k % length):</span><br><span class="line">            nums.insert(<span class="number">0</span>,nums[-(i+<span class="number">1</span>)])</span><br><span class="line">        nums[:] = nums[:length]</span><br></pre></td></tr></table></figure><h3 id="方式二-切片-："><a href="#方式二-切片-：" class="headerlink" title="方式二(切片)："></a>方式二(切片)：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        i = k % length</span><br><span class="line">        nums[:] = nums[-i:] + nums[:-i]</span><br></pre></td></tr></table></figure><h3 id="方式三-翻转部分元素-："><a href="#方式三-翻转部分元素-：" class="headerlink" title="方式三(翻转部分元素)："></a>方式三(翻转部分元素)：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        k %= len(nums)</span><br><span class="line">        nums.reverse()</span><br><span class="line">        self.reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>)</span><br><span class="line">        self.reverse(nums, k, len(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        nums: list</span></span><br><span class="line"><span class="string">        start: int</span></span><br><span class="line"><span class="string">        end: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">while</span> start &lt; end:</span><br><span class="line">            temp = nums[end]</span><br><span class="line">            nums[end] = nums[start]</span><br><span class="line">            nums[start] = temp</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">            end -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="解题中出现的问题："><a href="#解题中出现的问题：" class="headerlink" title="解题中出现的问题："></a>解题中出现的问题：</h3><ol><li><p>关于list的值传递和地址传递<br> 由于自己的生疏，错误的使用了传地址的方式给list赋值，导致修改了list所指向的内存，而不是修改了原本所指内存的内容，所以出现了无法修改函数外传入的数组 这样的问题。</p></li><li><p>关于 k &gt; len(nums) 情况的处理：</p><ul><li><p>开始考虑过：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(nums) &lt; k:</span><br><span class="line">k = k - len(nums)</span><br></pre></td></tr></table></figure><p>  这样存在问题: k 可能会大于 length 很多倍。</p><blockquote><p>经过分析，这种方式并不妥当。例如当<code>nums = [1,2] k = 5</code>时，就会出现问题，预期结果为<code>[2,1]</code>，而实际结果为<code>[1,2]</code>。</p><p>但是在我试着这种方式提交后，显示提交答案通过，在查看其它通过的结果中也有相似的操作。这个应该是LeetCode测试用例不完善出现的问题。</p></blockquote></li><li><p>通过循环解决：<br>  就是上面的判断丢在循环里。同时加上了 <code>if k != 0 and len(nums) &gt; 1 and k != len(nums)</code> 这样的判断。</p><blockquote><p>这种方式可行，但是并不是最优解。</p></blockquote></li><li>直接利用求余运算<code>%</code>解决：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">length = len(nums)</span><br><span class="line">       i = k % length</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><h4 id="1-Python-列表切片的总结："><a href="#1-Python-列表切片的总结：" class="headerlink" title="1. Python 列表切片的总结："></a>1. Python 列表切片的总结：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class slice(start, stop[, step])</span><br></pre></td></tr></table></figure><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><ol><li>关于回文素数的题目，生成回文数中有进行使用</li><li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868196352269f28f1f00aee485ea27e3c4e47f12bc7000" target="_blank" rel="noopener">廖雪峰Python教程</a></li><li><a href="https://docs.python.org/3.6/library/functions.html?highlight=slice#slice" target="_blank" rel="noopener">官方文档</a></li></ol><h5 id="切片初步："><a href="#切片初步：" class="headerlink" title="切片初步："></a>切片初步：</h5><p>切片 <code>list[x:y]</code> 范围为 x 到 y-1. 若未指定 x, 则默认x为0. 若未指定x或y, 则默认为获取第x个元素之后的所有元素或者前y个元素. 切片也可在 for 中进行使用.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(L[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># 获取list中前两个元素.</span></span><br><span class="line">print(L[:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"></span><br><span class="line">print(L[<span class="number">2</span>:]) <span class="comment"># 获取list中第二个元素后的所有元素.</span></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>x 或者 y 可以为正整数或者负整数。当为负时，表示列表的倒数第n个元素。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(L[:<span class="number">-2</span>]) <span class="comment"># 获取列表倒数第二个元素以前的所有元素</span></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">print(L[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment"># 获取倒数第三个元素到倒数第一个元素以前的元素</span></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [3, 4]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：默认情况下，x 必须要小于 y。</p></blockquote><h5 id="切片进阶："><a href="#切片进阶：" class="headerlink" title="切片进阶："></a>切片进阶：</h5><p>切片<code>list[x:y:z]</code>方法还有第三个参数z，用于指定步长。步长可以为正或者负。当步长为负时，需要 x 大于 y。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(L[::<span class="number">-1</span>]) <span class="comment"># 获取L所有元素的倒序结果</span></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line">print(L[<span class="number">2</span>:<span class="number">5</span>:<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line">print(L[:<span class="number">-4</span>:<span class="number">-1</span>]) <span class="comment"># 获取从列表开头到倒数第四个元素之间的元素</span></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [5, 4, 3]</span></span><br><span class="line"></span><br><span class="line">print(L[::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h4 id="2-Python中的List之间复制的总结"><a href="#2-Python中的List之间复制的总结" class="headerlink" title="2. Python中的List之间复制的总结"></a>2. Python中的List之间复制的总结</h4><h5 id="1-修改地址："><a href="#1-修改地址：" class="headerlink" title="1. 修改地址："></a>1. 修改地址：</h5><p>直接使用“<code>=</code>”进行赋值，会进行地址传递，例如<code>listB=listA</code>，就是将<code>listA</code>的地址传给了<code>listB</code>，对<code>listB</code>的地址进行的修改。这里的<code>listB</code>，无论是空还是非空，结果都是一样的。<strong>这时无论是对<code>listA</code>还是<code>listB</code>进行修改，都是对同一块内存进行修改。</strong></p><p>如果不想将<code>listA</code>的地址传递给<code>listB</code>，只想将<code>listA</code>的值传递给<code>listB</code>，则可以通过<code>listB=listA[:]</code>这样的方式解决。这样的操作，<strong>就是首先将<code>listA</code>的内容复制一份，然后将这个复制的内容的地址给到<code>listB</code>，这时<code>listA</code>和<code>listB</code>就指向了各自的地址，不会相互影响了。</strong></p><h6 id="首先看一下上面两种赋值方式，listA和listB的地址："><a href="#首先看一下上面两种赋值方式，listA和listB的地址：" class="headerlink" title="首先看一下上面两种赋值方式，listA和listB的地址："></a>首先看一下上面两种赋值方式，listA和listB的地址：</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(id(listA))</span><br><span class="line">listB = listA</span><br><span class="line">print(id(listB))</span><br><span class="line">listB = listA[:]</span><br><span class="line">print(id(listB))</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># 4557213320</span></span><br><span class="line"><span class="comment"># 4557213320</span></span><br><span class="line"><span class="comment"># 4558224264</span></span><br></pre></td></tr></table></figure><blockquote><p>显然，<code>listB = listA</code>只是地址的传递，而<code>listB=listA[:]</code>则是将<code>listA</code>的内容复制一份后，将复制内容的地址传给了<code>listB</code>。</p></blockquote><h6 id="1-1-listA-listB的例子："><a href="#1-1-listA-listB的例子：" class="headerlink" title="1.1 listA = listB的例子："></a>1.1 <code>listA = listB</code>的例子：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立B的同时将A地址传给B</span></span><br><span class="line">listB = listA</span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 233]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先建立B，然后再将A地址传递给B</span></span><br><span class="line">listB = []</span><br><span class="line">listB = listA </span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 233]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先建立B并赋值,然后将A的地址传给B</span></span><br><span class="line">listB = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">listB = listA</span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 233]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里先将A的地址赋给了B, 然后通过=,又将[4,5,6]的地址赋给了A</span></span><br><span class="line">listB = listA</span><br><span class="line">listA = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] </span><br><span class="line">print(listA)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [4, 5, 6]</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listC = listB = listA</span><br><span class="line">listC.append(<span class="number">1234</span>)</span><br><span class="line">print(listA)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 1234]</span></span><br></pre></td></tr></table></figure><h6 id="1-2-listB-listA-的例子："><a href="#1-2-listB-listA-的例子：" class="headerlink" title="1.2 listB = listA[:] 的例子："></a>1.2 <code>listB = listA[:]</code> 的例子：</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listB = listA[:] <span class="comment"># 将A的内容复制一份，给到B</span></span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listB = []</span><br><span class="line">listB = listA[:]</span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listB = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">listB = listA[:]</span><br><span class="line">listA.append(<span class="number">233</span>)</span><br><span class="line">print(listB)</span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h5 id="2-修改内存："><a href="#2-修改内存：" class="headerlink" title="2. 修改内存："></a>2. 修改内存：</h5><p>如果只是想要修改<code>listB</code>的内存，而不是需改其所指向内存。就需要通过<code>listB[:] = listA</code> 来实现。注意：这里的<code>listB</code>需要先进行定义，因为没法给一个不存在的地址进行赋值╮(╯▽╰)╭</p><h6 id="各种赋值方式的结果和地址："><a href="#各种赋值方式的结果和地址：" class="headerlink" title="各种赋值方式的结果和地址："></a>各种赋值方式的结果和地址：</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listB = []</span><br><span class="line">print(<span class="string">"A: "</span> + str(listA))</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line">print(<span class="string">"id of A: "</span> + str(id(listA)))</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---1---\nlistB[:] = listA"</span>)</span><br><span class="line">listB[:] = listA</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---2---\nlistB[:] = listA[:]"</span>)</span><br><span class="line">listB[:] = listA[:]</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---3---\nlistB = listA"</span>)</span><br><span class="line">listB = listA</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n---4---\nlistB = listA[:]"</span>)</span><br><span class="line">listB = listA[:]</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --结果--</span></span><br><span class="line">A: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">B: []</span><br><span class="line">id of A: <span class="number">4390356616</span></span><br><span class="line">id of B: <span class="number">4390356744</span></span><br><span class="line"></span><br><span class="line">--<span class="number">-1</span>---</span><br><span class="line">listB[:] = listA</span><br><span class="line">id of B: <span class="number">4390356744</span></span><br><span class="line">B: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">--<span class="number">-2</span>---</span><br><span class="line">listB[:] = listA[:]</span><br><span class="line">id of B: <span class="number">4390356744</span></span><br><span class="line">B: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">--<span class="number">-3</span>---</span><br><span class="line">listB = listA</span><br><span class="line">id of B: <span class="number">4390356616</span></span><br><span class="line">B: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">--<span class="number">-4</span>---</span><br><span class="line">listB = listA[:]</span><br><span class="line">id of B: <span class="number">4390384200</span></span><br><span class="line">B: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h5 id="3-在函数中修改："><a href="#3-在函数中修改：" class="headerlink" title="3. 在函数中修改："></a>3. 在函数中修改：</h5><p>要通过函数对一个函数外的list进行修改，就必须使用 <code>listB[:] = listA</code> 这种方式，修改list所指向内存的值。</p><h6 id="3-1-通过-listB-listA-的方式："><a href="#3-1-通过-listB-listA-的方式：" class="headerlink" title="3.1 通过 listB[:] = listA 的方式："></a>3.1 通过 <code>listB[:] = listA</code> 的方式：</h6><p>所以如果需要通过函数对一个list进行修改，就需要通过 <code>listB[:] = listA</code> 这样的方式实现。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">listB = []</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeB</span><span class="params">(listX)</span>:</span></span><br><span class="line">    print(<span class="string">"in function:"</span>)</span><br><span class="line">    print(<span class="string">"listX in func: "</span> + str(listX))</span><br><span class="line">    print(<span class="string">"id of listX in func: "</span> + str(id(listX)))</span><br><span class="line">    listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">"listA in func: "</span> + str(listA))</span><br><span class="line">    print(<span class="string">"id of listA in func: "</span> + str(id(listA)))</span><br><span class="line">    listX[:] = listA <span class="comment"># 这里只修改listX所指向内存的值</span></span><br><span class="line">    print(<span class="string">"listX in func: "</span> + str(listX))</span><br><span class="line">    print(<span class="string">"id of listX in func: "</span> + str(id(listX)) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">changeB(listB)</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># B: []</span></span><br><span class="line"><span class="comment"># id of B: 4331075080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in function:</span></span><br><span class="line"><span class="comment"># listX in func: []</span></span><br><span class="line"><span class="comment"># id of listX in func: 4331075080</span></span><br><span class="line"><span class="comment"># listA in func: [1, 2, 3]</span></span><br><span class="line"><span class="comment"># id of listA in func: 4331102408</span></span><br><span class="line"><span class="comment"># listX in func: [1, 2, 3]</span></span><br><span class="line"><span class="comment"># id of listX in func: 4331075080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B: [1, 2, 3]</span></span><br><span class="line"><span class="comment"># id of B: 4331075080</span></span><br></pre></td></tr></table></figure><h6 id="3-2-通过-listB-listA的方式"><a href="#3-2-通过-listB-listA的方式" class="headerlink" title="3.2 通过 listB = listA的方式:"></a>3.2 通过 <code>listB = listA</code>的方式:</h6><p>因为函数中的变量指向的内存在函数执行完毕后，会被释放，也就是说函数内变量的作用域只在函数内。<strong>所以不能通过 <code>listB = listA</code> 将函数中的list的地址传递给函数外的变量。注：同理，<code>listB = listA[:]</code> 这种方式，也不可以。</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">listB = []</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeB</span><span class="params">(listX)</span>:</span></span><br><span class="line">    print(<span class="string">"in function:"</span>)</span><br><span class="line">    print(<span class="string">"listX in func: "</span> + str(listX))</span><br><span class="line">    print(<span class="string">"id of listX in func: "</span> + str(id(listX)))</span><br><span class="line">    listA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    print(<span class="string">"listA in func: "</span> + str(listA))</span><br><span class="line">    print(<span class="string">"id of listA in func: "</span> + str(id(listA)))</span><br><span class="line">    listX = listA</span><br><span class="line">    print(<span class="string">"listX in func: "</span> + str(listX))</span><br><span class="line">    print(<span class="string">"id of listX in func: "</span> + str(id(listX)) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">changeB(listB)</span><br><span class="line">print(<span class="string">"B: "</span> + str(listB))</span><br><span class="line">print(<span class="string">"id of B: "</span> + str(id(listB)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --结果--</span></span><br><span class="line"><span class="comment"># B: []</span></span><br><span class="line"><span class="comment"># id of B: 4385576456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in function:</span></span><br><span class="line"><span class="comment"># listX in func: []</span></span><br><span class="line"><span class="comment"># id of listX in func: 4385576456</span></span><br><span class="line"><span class="comment"># listA in func: [1, 2, 3]</span></span><br><span class="line"><span class="comment"># id of listA in func: 4385578696</span></span><br><span class="line"><span class="comment"># listX in func: [1, 2, 3]</span></span><br><span class="line"><span class="comment"># id of listX in func: 4385578696</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B: []</span></span><br><span class="line"><span class="comment"># id of B: 4385576456</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Python Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> LeetCode-Easy </tag>
            
            <tag> Python 列表切片的总结 </tag>
            
            <tag> Python List之间复制的总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>会对&quot;本地搜索&quot;功能出现影响的文本内容</title>
      <link href="/%E4%BC%9A%E5%AF%B9-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2-%E5%8A%9F%E8%83%BD%E5%87%BA%E7%8E%B0%E5%BD%B1%E5%93%8D%E7%9A%84%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9.html"/>
      <url>/%E4%BC%9A%E5%AF%B9-%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2-%E5%8A%9F%E8%83%BD%E5%87%BA%E7%8E%B0%E5%BD%B1%E5%93%8D%E7%9A%84%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9.html</url>
      <content type="html"><![CDATA[<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><p><img src="/images/post/sick-file-error.png" alt=""></p><p>更新文章后, 搜索功能一直卡在加载状态, 切换到 <code>nsdf.top/search.xml</code> 页面,发现有以上错误提示.</p><a id="more"></a><h1 id="问题语句"><a href="#问题语句" class="headerlink" title="问题语句:"></a>问题语句:</h1><ul><li><p>有问题的语句:</p><p>  <a href="/code/problem-content.txt"><img src="/images/post/problem-file-view.png" alt="放在这个文件里了, 点击可以下载"></a></p><blockquote><p>点击图片可以下载这个文件</p></blockquote></li><li><p>没问题的语句:</p><p>  在打开一个新的项目文件夹时 就需要重新配置 launch.json 中的 cwd 参数</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>问题在于空格, 在有问题文本中,存在着编码错误的空格,如果你尝试删除这些空格,会发现在有两处空格位置需要删除两次才会消失, 这两个位置就是问题产生的原因.</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><ul><li><p>寻找一种可以重新将文本编码的方式</p></li><li><p>或者把有问题的文件改掉,参考:</p><ul><li><a href="http://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/" target="_blank" rel="noopener">http://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/</a></li><li>使用Sublime或者vim,都可以很明显的看出问题在哪<br><img src="/images/post/sick-file.png" alt=""></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 搭建 </tag>
            
            <tag> hexo-local-search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog搭建踩坑指南</title>
      <link href="/blog%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97.html"/>
      <url>/blog%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97.html</url>
      <content type="html"><![CDATA[<blockquote><p>看，前面有个坑。    ─=≡Σ(((つ•̀ω•́)つ))</p></blockquote>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 搭建 </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-122.买卖股票的最佳时机 II | Best Time to Buy and Sell Stock II | 贪心算法,列表解析</title>
      <link href="/leetcode-122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii-best-time-to-buy-and-sell-stock-ii-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90.html"/>
      <url>/leetcode-122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii-best-time-to-buy-and-sell-stock-ii-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90.html</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure></p><p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从题目中分析，要求只能保留<strong>一只</strong>股票，并且尽可能完成<strong>多</strong>的交易。</p><p>于是我开始尝试从从第一个低于第二天价格的位置买入，然后在第一个高于此价格的位置卖出，然<br>后再从下一个低于后续价格的位置买入，然后在最近的高于此价格位置卖出。经过计算，我发现按照这种方式，所有的买入和卖出操作都是发生在相邻元素的，也就是列表的 i和i+1位置。并且在计算了实例的三个用例后，结果符合预期。同时，这也符合 <a href="https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E6%B3%95" target="_blank" rel="noopener">贪心算法</a> 的思路。</p><!-- [^tanxin][^tanxin]: 贪心算法：是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。 --><p>进而得出结论，只要计算列表中所有相邻元素的差值，最大收益即为所有差值大于0的结果的和。</p><p>从列表长度方面分析，当列表为空，或者只有一个元素的时候，不满足买入卖出条件，所以可以在计算时先行排除。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    首先判断 prices长度是否小于2,</span></span><br><span class="line"><span class="string">    然后循环结算列表 i+1 与 i 的差, </span></span><br><span class="line"><span class="string">    并将大于0的结果累加。</span></span><br><span class="line"><span class="string">    最后返回累加结果,即为最大收益</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        max_profit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(prices) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> max_profit</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices) - <span class="number">1</span>):</span><br><span class="line">            profit = prices[i + <span class="number">1</span>] - prices[i]</span><br><span class="line">            <span class="keyword">if</span> profit &gt; <span class="number">0</span>:</span><br><span class="line">                max_profit += profit</span><br><span class="line">        <span class="keyword">return</span> max_profit</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N) ， 空间复杂度： O(1)</li></ul><p><img src="/images/post/bttbassii-2.jpg" alt=""></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>只是写了一个列表解析<a href="[一篇关于python列表解析的帖子](http://codingpy.com/article/python-list-comprehensions-explained-visually/){:target=&quot;_blank&quot;}">^jiexi</a>，一行完成。 实际性能不如方式一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">解题思路与方式一相同，列表 i+1 与 i 元素相减，并将大于0的结果相加。</span></span><br><span class="line"><span class="string">只是改用了列表解析的方式，来写成一行。 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> int((sum(list((prices[i + <span class="number">1</span>] - prices[i]) + abs(prices[i + <span class="number">1</span>] - prices[i])<span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices) - <span class="number">1</span>)))) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N)，空间复杂度：O(N)</li></ul><p><img src="/images/post/bttbassii-1.jpg" alt=""></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>由于是刚开始接触算法题，最开始看到这道题的时候有些摸不着头脑。不知道从哪里入手，比如怎么找出差值最大的和，是先判断间隔为1的差值，在判断间隔为2的差值…<br>但是沉下心来，在纸上进行一些尝试后，找出适用于用例的计算方式，很快就找到了这个规律，直接找出相邻的差值即可。然后写成代码进行验证，符合预期。</p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Python Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> Python 列表解析 </tag>
            
            <tag> LeetCode-Easy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-219.存在重复元素 II | Contains Duplicate II</title>
      <link href="/leetcode-219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii-contains-duplicate-ii.html"/>
      <url>/leetcode-219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii-contains-duplicate-ii.html</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,1], k = 3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><a id="more"></a> <p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,0,1,1], k = 1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,1,2,3], k = 2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题，可以直接使用一个<strong>长度为k的哈希表</strong>即可解决问题。哈希表中只会保存不重复的内容，所以通过循环，按顺序每次向哈希表中添加一个列表元素，判断哈希表长度是否增长：如果增长，就将最早加入哈希表的元素删除，以保持哈希表长度位k；如果长度不变，即找到了列表中满足重复且索引差的绝对值最大为k的元素，题目结束。</p><p>这就相当与在一条数字组成的轨道上放置的一个长度为k的方框，只要判断框框范围内是否有重复即可，而不需要从一开始就找到所有重复元素。</p><p><strong>此外</strong>，还可以在程序开头，先行判断：</p><ol><li>列表是否存在重复</li><li>列表长度是否超过k</li></ol><p><strong>补充</strong>：<br>这道题也可以使用字典来实现类似哈希表的操作，用key存nums[i]的值,value 存 nums[i]的索引。每当发现重复元素时（if xx in dic），判断字典中对应key的 value值是与当前元素的索引值的差，如果符合!&gt;k 这个条件，即找到结果，反之则更新字典中key的value值。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>通过set来解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要使用 haseSet来解决问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        使用hash set 来判断 k长度的窗口中有无重复的数字</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断nums为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 判断nums长度小于k的情况</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= k:</span><br><span class="line">            <span class="keyword">return</span> len(nums) &gt; len(set(nums))</span><br><span class="line">        <span class="comment"># 判断读取的前k个元素有无重复</span></span><br><span class="line">        hashset = set(nums[:k])</span><br><span class="line">        <span class="keyword">if</span> len(hashset) &lt; k:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 循环判断,每次按顺序添加一个元素到set中,判断长度.如果为k,证明新加入的元素与set中的存在重复,条件成立.</span></span><br><span class="line">        <span class="comment"># 否则,就将set中最早加入的元素去掉, 由于set()后会改变原nums顺序,所以需要使用remove方法,按照添加顺序去除. 即nums[i-k]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k, len(nums)):</span><br><span class="line">            hashset.add(nums[i])</span><br><span class="line">            <span class="keyword">if</span> len(hashset) == k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashset.remove(nums[i - k])  <span class="comment"># 这里相当于去掉了nums的第一个元素,依次类推</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N), 空间复杂度 O(1)</li></ul><p><img src="/images/post/cdii-1.jpg" alt="cdii-1"><br><strong>beat 98.67 % 的 python3</strong></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>通过使用字典来解决问题,用key存nums[i]的值,value寸nums[i]的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#利用字典存储数据，以便查询，key为数字，value为对应索引</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> dic <span class="keyword">and</span> index - dic[value] &lt;= k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[value] = index</span><br><span class="line">                <span class="comment"># Q: 如果发现重复的数字但是不满足k的条件,如何处理</span></span><br><span class="line">                <span class="comment"># A: dic使用value作为key,所以只会保留一个数字最新的索引,不满足条件就会被覆盖</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N), 空间复杂度 O(N)</li></ul><h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><p>看到这道题时，首先想到的思路是分步进行操作：</p><ol><li>判断列表是否存在重复元素</li><li>找出重复的元素，并返回set()后的结果</li><li>找出每个重复元素在列表中的所有位置的索引</li><li>判断这些索引之间的差，是否存在 不超过k的结果。<br>我按照这个思路分块写出了代码后，逻辑没有任何问题，但是用时超出时间限制。</li></ol><p>经过分析和梳理，发现自己把简单问题复杂化了，上面使用的这个set(),就可以直接解决问题。</p><p>在练习算法题的时候，如果自己安装逻辑方式的解法不满足题目要求，尝试多动手在本子上画一画，或者说进行一些空间想象，可能会找出更好的方案。例如这道题，其实就像一个数组轨道上加一个长度为k的方框这样的东西。不需要考虑方框外的情况，只要确认方框内的数组满足条件即可。</p><p>最开始，想的很复杂的解决方式：<br><img src="/images/post/emmm.jpg" alt="emm"></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> LeetCode-Easy </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过MarkDown编写blog进阶技巧</title>
      <link href="/%E9%80%9A%E8%BF%87markdown%E7%BC%96%E5%86%99blog%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7.html"/>
      <url>/%E9%80%9A%E8%BF%87markdown%E7%BC%96%E5%86%99blog%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7.html</url>
      <content type="html"><![CDATA[<h2 id="在MarkDown中插入链接的一些技巧"><a href="#在MarkDown中插入链接的一些技巧" class="headerlink" title="在MarkDown中插入链接的一些技巧"></a>在MarkDown中插入链接的一些技巧</h2><h4 id="1-直接添加链接"><a href="#1-直接添加链接" class="headerlink" title="1. 直接添加链接"></a>1. 直接添加链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://nsdf.top/&gt;</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/">http://nsdf.top/</a></p><h4 id="2-一般的链接"><a href="#2-一般的链接" class="headerlink" title="2. 一般的链接"></a>2. 一般的链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">丁帆的blog： [<span class="string">nsdf.top</span>](<span class="link">http://nsdf.top/</span>)</span><br><span class="line"></span><br><span class="line">丁帆的blog： [<span class="string">nsdf.top</span>](<span class="link">http://nsdf.top/ "丁帆的博客"</span>)</span><br></pre></td></tr></table></figure><p>丁帆的blog： <a href="http://nsdf.top/">nsdf.top</a></p><p>丁帆的blog： <a href="http://nsdf.top/" title="丁帆的博客">nsdf.top</a></p><a id="more"></a> <h4 id="3-相对链接"><a href="#3-相对链接" class="headerlink" title="3. 相对链接"></a>3. 相对链接</h4><p>链接至自己blog中的其他文章等内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[个人博客搭建踩坑指南](/2018/08/18/一些推荐的文章/)</span><br><span class="line">[封面图片](/img/post_bg_apple_ad.jpg)</span><br></pre></td></tr></table></figure></p><p><a href="/2018/08/18/一些推荐的文章/">个人博客搭建踩坑指南</a></p><p><a href="/img/post_bg_apple_ad.jpg">封面图片</a> </p><blockquote><p>注:此为Jekyll内容,待修改</p></blockquote><h4 id="4-在图片中嵌入链接"><a href="#4-在图片中嵌入链接" class="headerlink" title="4. 在图片中嵌入链接"></a>4. 在图片中嵌入链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![apple-touch-icon](/images/post/blog-logo.png))](http://nsdf.top/)</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/"><img src="/images/post/blog-logo.png" alt="apple-touch-icon">)</a></p><blockquote><p>注: 此功能在基于Jekyll的blog中为点击图片前往链接;在基于Heox+NexT的blog中,为点击图片下方链接跳转.  !!!待修改</p></blockquote><h4 id="5-在新标签中打开连接"><a href="#5-在新标签中打开连接" class="headerlink" title="5. 在新标签中打开连接"></a>5. 在新标签中打开连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nsdf.top](http://nsdf.top/)&#123;:target=&quot;_blank&quot;&#125;</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/">nsdf.top</a>{:target=”_blank”}</p><blockquote><p>注: 在之前使用的基于Jekyll的Blog中,这个功能可用且需要. 在当前基于Heox+NexT的blog中,不需要这样写.</p></blockquote><h2 id="在MarkDown中插入视频"><a href="#在MarkDown中插入视频" class="headerlink" title="在MarkDown中插入视频"></a>在MarkDown中插入视频</h2><p>在MarkDown中，只要使用 <code>&lt;iframe&gt;</code> 标签就可以方便的插入视频了。</p><p>关于 <code>&lt;iframe&gt;</code> 的更多信息： <a href="http://www.w3school.com.cn/tags/tag_iframe.asp" target="_blank" rel="noopener">w3school-HTML-iframe 标签</a></p><p>下面的示例中，分别演示了插入 腾讯，优酷，YouTube，哔哩哔哩 这几个网站的视频的操作</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><h4 id="1-腾讯视频"><a href="#1-腾讯视频" class="headerlink" title="1. 腾讯视频"></a>1. 腾讯视频</h4><ol><li>打开一个视频，点击下方分享按钮，然后复制通用代码<br><img src="/images/post/tencent-video.jpg" alt=""></li></ol><ol start="2"><li><p>将复制的代码粘贴至MarkDown文件中。 这样就完成了。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"498"</span> <span class="attr">src</span>=<span class="string">"https://v.qq.com/iframe/player.html?vid=j0600cjxtp0&amp;tiny=0&amp;auto=0"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>另外，如果需要视频居中显示，可能还需要（视blog而定）添加一个<code>&lt;center&gt;</code>标签。</p></blockquote></li><li><p>最终效果如下：</p> <center><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=j0600cjxtp0&tiny=0&auto=0" allowfullscreen></iframe></center></li></ol><h4 id="2-优酷"><a href="#2-优酷" class="headerlink" title="2. 优酷"></a>2. 优酷</h4><ol><li><p>同样的，打开一个视频，点击分享，然后复制通用代码<br> <img src="/images/post/youku-video.jpg" alt=""></p></li><li><p>将代码粘贴至MarkDown文件中。就完成了</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XMTg0MTQ4NDk4OA=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>效果如下</p> <iframe height="498" width="510" src="http://player.youku.com/embed/XMTg0MTQ4NDk4OA==" frameborder="0" 'allowfullscreen'=""></iframe><blockquote><p>我发现在我常用的Safari以及chrome浏览器中，无法识别优酷的这种写法。于是我将代码改为了下面的写法，主要是将 height,width,frameborder 的数值加上双引号，将src链接改为双引号，最后将allowfullscreen单引号去掉 </p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">"498"</span> <span class="attr">width</span>=<span class="string">"510"</span> <span class="attr">src</span>=<span class="string">"http://player.youku.com/embed/XMTg0MTQ4NDk4OA=="</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>   <iframe height="498" width="510" src="http://player.youku.com/embed/XMTg0MTQ4NDk4OA==" frameborder="0" allowfullscreen></iframe><h4 id="3-YouTube"><a href="#3-YouTube" class="headerlink" title="3. YouTube"></a>3. YouTube</h4><ol><li>直接在视频上右击，选择复制嵌入代码，然后粘贴至MarkDown中即可。<br> <img src="/images/post/youtube-video.jpg" alt=""></li><li><p>效果如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;919&quot; height=&quot;525&quot; src=&quot;https://www.youtube.com/embed/LcGPI2tV2yY&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure> <iframe width="919" height="525" src="https://www.youtube.com/embed/LcGPI2tV2yY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></li></ol><h4 id="4-哔哩哔哩"><a href="#4-哔哩哔哩" class="headerlink" title="4. 哔哩哔哩"></a>4. 哔哩哔哩</h4><ol><li>基本流程也一样，具体看下面截图就好了。需要注意的是，哔哩哔哩复制来的嵌入代码的src 缺少 <code>https:</code>，我需要补上这个，链接才会恢复正常。同时，还需要添加窗口尺寸等设置。</li><li><p>具体操作：</p><ul><li><p>在网站中复制嵌入代码：</p><p>  <img src="/images/post/Snip20180826_141.png" alt=""><br>  <img src="/images/post/Snip20180826_143.png" alt=""><br>  <img src="/images/post/Snip20180826_144.png" alt=""></p></li><li><p>修改复制到的嵌入代码：</p><ul><li><p>原本的：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=1031924&amp;cid=1494043&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改后:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://player.bilibili.com/player.html?aid=1031924&amp;cid=1494043&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>效果</p> <iframe width="640" height="498" src="https://player.bilibili.com/player.html?aid=1031924&cid=1494043&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></li></ol>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> iframe </tag>
            
            <tag> 链接跳转 </tag>
            
            <tag> 图片链接 </tag>
            
            <tag> blog技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VSCode 中使用 Python 异常报错 FileNotFoundError 的解决办法</title>
      <link href="/vscode-%E4%B8%AD%E4%BD%BF%E7%94%A8-python-%E5%BC%82%E5%B8%B8%E6%8A%A5%E9%94%99-filenotfounderror-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"/>
      <url>/vscode-%E4%B8%AD%E4%BD%BF%E7%94%A8-python-%E5%BC%82%E5%B8%B8%E6%8A%A5%E9%94%99-filenotfounderror-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在vscode中使用Python,通过建立一个Python程序读取同一子目录下的txt文件, 并打印其内容.</p><h2 id="预期结果"><a href="#预期结果" class="headerlink" title="预期结果"></a>预期结果</h2><p>程序读取同一个子目录中的 <code>content.txt</code> 文件, 然后打印其内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stay hungry</span><br><span class="line">stay foolish</span><br></pre></td></tr></table></figure></p><h2 id="实际结果"><a href="#实际结果" class="headerlink" title="实际结果"></a>实际结果</h2><p>通过debug, 提示如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &apos;content.txt&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><img src="/images/post/vscode_python_filenotefound_1.png" alt="vscode_python_filenotefound_1-c650"></p><h1 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h1><p>vscode在进行debug时,使用的路径并不是当前python文件所在的目录,而是固定为项目文件夹的根目录.所以当程序试图从根目录寻找此文件时,自然会报错.于是我进一步尝试将文本文件移动至项目的根目录,错误消失.<br>所以,解决问题的关键就是修改vscode在进行debug时使用的目录,使其自动的指向当前python文件所在目录.</p><p><img src="/images/post/vscode_python_filenotefound_2.png" alt="vscode_python_filenotefound_2-c650"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>初步思路是通过在 VSCode 的 Setting 中或者 debug 的配置文件中进行配置，来解决这个问题。通过 Google 后，我在 StackOverflow 上找到了具体解决方案。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h2><ul><li><a href="https://stackoverflow.com/questions/43801142/vscode-working-directory-when-debugging-python" target="_blank" rel="noopener">Stack Overflow - VSCode — how to set working directory for debug</a></li><li><a href="https://stackoverflow.com/questions/43801142/vscode-working-directory-when-debugging-python" target="_blank" rel="noopener">Stack Overflow - vscode working directory when debugging python</a></li></ul><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>点击vscode侧边的调试按钮,在出现的侧栏顶端找到设置按钮(图中齿轮图标), 点击打开 <code>launch.json</code> 文件, 在文件中找到当前所用调试的方式, 添加cwd配置 <code>&quot;cwd&quot;: &quot;&quot;</code>. (我这里使用的是 <code>Python: Terminal (integrated)</code>) 添加完成后, 在此debug程序, 发现错误消失.</p><p><img src="/images/post/vscode_python_filenotefound_3.png" alt="vscode_python_filenotefound_3-c650"></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>每次打开一个新的项目文件夹时, 都需要重新在<code>launch.json</code>文件中重新配置参数.</p>]]></content>
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FileNotFoundError </tag>
            
            <tag> cwd </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些值得推荐的内容</title>
      <link href="/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E6%8E%A8%E8%8D%90%E7%9A%84%E5%86%85%E5%AE%B9.html"/>
      <url>/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E6%8E%A8%E8%8D%90%E7%9A%84%E5%86%85%E5%AE%B9.html</url>
      <content type="html"><![CDATA[<h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><ul><li><p><a href="https://weibo.com/ibuick" target="_blank" rel="noopener">ibuick</a> - <a href="https://media.weibo.cn/article?id=2309404272684186896746" target="_blank" rel="noopener">macOS 与 external GPU (eGPU)</a></p><p>  非常详细的关于 macOS 下 外置显卡 (eGPU) 的设置，使用以及注意事项 的文章。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 推荐 </tag>
            
            <tag> eGPU Mac外置显卡 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac 上使用 Visual Studio Code 进行 Python 开发</title>
      <link href="/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-visual-studio-code-%E8%BF%9B%E8%A1%8C-python-%E5%BC%80%E5%8F%91.html"/>
      <url>/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-visual-studio-code-%E8%BF%9B%E8%A1%8C-python-%E5%BC%80%E5%8F%91.html</url>
      <content type="html"><![CDATA[<blockquote><p>在Visual Studio Code 的官方网站中，已经有在 VSCode 上使用 Python 的详细配置了， </p><p>链接：<a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="noopener">Python in Visual Studio Code</a>{:target=”_blank”}</p></blockquote><hr><h1 id="Python-的安装-macOS"><a href="#Python-的安装-macOS" class="headerlink" title="Python 的安装 (macOS)"></a>Python 的安装 (macOS)</h1><h2 id="检查已安装的-Python-版本"><a href="#检查已安装的-Python-版本" class="headerlink" title="检查已安装的 Python 版本"></a>检查已安装的 Python 版本</h2><ol><li><p>检查是否安装了python2</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 2.7.15 (default, Jun 17 2018, 12:46:58) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a> <ol start="2"><li><p>检查是否安装了python3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.6.6 (v3.6.6:4cf1f54eb7, Jun 26 2018, 19:50:54) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果得到以上输出，则表示对应的版本已安装。</p></blockquote><h2 id="使用-Homebrew-来安装-Python3"><a href="#使用-Homebrew-来安装-Python3" class="headerlink" title="使用 Homebrew 来安装 Python3"></a>使用 Homebrew 来安装 Python3</h2><ol><li><p>安装Homebrew<br> Homebrew依赖于Apple包Xcode，需要先进行安装。出现的对话框点OK即可。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure><p> 安装<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a>：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p> 确认Homebrew安装正确</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew doctor</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>安装Python3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install python3</span><br></pre></td></tr></table></figure><p> 确认安装版本</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 --version</span><br><span class="line">Python 3.6.6</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="VSCode-的配置"><a href="#VSCode-的配置" class="headerlink" title="VSCode 的配置"></a>VSCode 的配置</h1><h2 id="安装VSCode的Python扩展插件"><a href="#安装VSCode的Python扩展插件" class="headerlink" title="安装VSCode的Python扩展插件"></a>安装VSCode的Python扩展插件</h2><!--[](){:target="_blank"}--><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener"> <img src="/images/post/Snip20180812_10.png" alt="点击前往安装"></a><br>    点击图片下的链接可以前往安装，直接点击Install安装即可。或者也可以直接在VSCode的扩展栏（Shift + Command + X）中搜索Python，安装下载量最高的那个。安装完成后，就可以使用VSCode编辑python代码了，按F5即可进行debug。</p><h2 id="设置调试使用的-Python-版本"><a href="#设置调试使用的-Python-版本" class="headerlink" title="设置调试使用的 Python 版本"></a>设置调试使用的 Python 版本</h2><p>Mac上自带的 Python 版本为 2.7.x，VSCode 的调试（Python:Terminal(intergrated）)默认会使用系统自带的 Python 版本。而如果我们另外安装了 Python3，希望用 Python3 进行调试的时候，就需要修改一下  VSCode 的设置了。</p><p>设置步骤:</p><ol><li><p>打开VSCode用户设置（Code - 首选项 - 设置）    </p><p> <img src="/images/post/Snip20180812_12.png" alt=""></p></li><li><p>输入<code>&quot;python.pythonPath&quot;:&quot;python3&quot;,</code></p><p> <img src="/images/post/Snip20180812_15.png" alt=""></p></li></ol><hr><blockquote><p>以下两个插件需要预先安装<code>pip</code></p></blockquote><!--MarkDown 加锚点--><h2 id="配置yapf"><a href="#配置yapf" class="headerlink" title="配置yapf"></a>配置yapf</h2><ol><li><p>yapf简介<br> <a href="https://github.com/google/yapf" target="_blank" rel="noopener">yapf</a>{:target=”_blank”}是一个源代码格式化工具，可以辅助我们进行代码的格式化，安装完成后，通过快捷键 <code>Shift + Alt + F</code> 执行代码的格式化。</p></li><li><p>安装步骤</p><ol><li><p>打开命令行，输入 <code>pip install yapf</code></p></li><li><p>安装成功后， 打开VSCode用户设置（Code - 首选项 - 设置）</p><p> <img src="/images/post/Snip20180812_12.png" alt=""><br> 在<code>setting.json</code>文件中， 输入<code>&quot;python.formatting.provider&quot;: &quot;yapf&quot;,</code></p><p> <img src="/images/post/Snip20180812_14.png" alt=""></p></li></ol></li><li><p>yapf使用技巧</p><ol><li>设置 代码段禁用自动格式化<br> 通过 <code># yapf: disable</code> 以及 <code># yapf: enable</code>， 将不需要调整格式的代码段包括其中，即可在某些代码段禁用自动格式化。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yapf: disable</span><br><span class="line"># 这里的代码不会被自动调整格式</span><br><span class="line"># yapf: enable</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>2. 更多yafp用法参考    在终端中输入：`$ yapf -h`，查看相关帮助。</code></pre><h2 id="配置flake8"><a href="#配置flake8" class="headerlink" title="配置flake8"></a>配置flake8</h2><ol><li><p>flake8 简介</p><p> <a href="https://pypi.org/project/flake8/" target="_blank" rel="noopener">Flake8</a>{:target=”_blank”}包装了下列工具：</p><ul><li>PyFlakes：静态检查Python代码逻辑错误的工具。</li><li>pep8： 静态检查PEP 8编码风格的工具。</li><li>Ned Batchelder’s McCabe script：静态分析Python代码复杂度的工具。<br>通过flake8可以帮助我们避免以及查找错误，并规范格式。</li></ul></li><li><p>安装步骤：</p><ol><li>打开命令行，输入 <code>pip install flake8</code></li><li><p>打开VSCode用户设置（Code - 首选项 - 设置）</p><p> <img src="/images/post/Snip20180812_12.png" alt=""><br> 在<code>setting.json</code>文件中， 输入<code>&quot;python.linting.flake8Enabled&quot;:true,</code></p><p> <img src="/images/post/Snip20180812_13.png" alt=""></p></li></ol></li><li><p>flake8 的一些配置：</p><p> 如果我们的使用习惯和flake8的默认设定有冲突，可以对flake8进行配置。<br> 在控制台中，输入 <code>flake8 --help</code>， 会显示flake8可以设置的参数。我们可以在VSCode的Setting中对flake8的这些参数进行设置。<br> 在用户设置中添加 <code>&quot;python.linting.flake8Args&quot;: [],</code> 这条设置，并在其中添加需要修改的条目即可。<br> <img src="/images/post/Snip20180812_12.png" alt=""><br> <img src="/images/post/Snip20180822_5.png" alt=""></p><ol><li><p>调整flake8单行代码长度的检测：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 单行代码最大长度改为300</span><br><span class="line">&quot;python.linting.flake8Args&quot;: [&quot;--max-line-length=300&quot;]</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h1 id="VSCode-的其他设置"><a href="#VSCode-的其他设置" class="headerlink" title="VSCode 的其他设置"></a>VSCode 的其他设置</h1><ol><li><p>设置代码长度</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 80，120 表示分别在80和120字符处显示一条辅助线，可以进行设置和调整。</span><br><span class="line">&quot;editor.rulers&quot;: [80,120]</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.pixiv.net/member.php?id=6675416" target="_blank" rel="noopener">post-image: pixiv-id-6675416</a>{:target=”_blank”}</li><li><a href="https://www.cnblogs.com/tangxin-blog/p/6065017.html" target="_blank" rel="noopener">vscode 编写python如何禁止 flake8 提示 line too long</a>{:target=”_blank”}</li><li><a href="https://book.douban.com/subject/26829016/" target="_blank" rel="noopener">《Python编程：从入门到实践》</a>{:target=”_blank”}</li></ul>]]></content>
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Python安装&amp;配置 </tag>
            
            <tag> yapf </tag>
            
            <tag> flake8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的第一篇Blog</title>
      <link href="/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog.html"/>
      <url>/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog.html</url>
      <content type="html"><![CDATA[<h2 id="Hey"><a href="#Hey" class="headerlink" title="Hey"></a>Hey</h2><blockquote><p>这是我的第一篇博客.</p></blockquote><center><br>从很早以前就希望可以有一个自己的个人博客, 但是由于种种原因, 一直到现在才付诸实施.<br><br>希望自己可以一直坚持下去, 不断改进自己的博客, 与它一起成长.<br><br>同时也希望我分享的内容, 能够帮到此刻正在看我博客的你.<br><br></center>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
