<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>配合使用MWeb进行Blog编写</title>
      <link href="/2018/09/09/%E4%BD%BF%E7%94%A8MWeb%E9%85%8D%E5%90%88Hexo%E8%BF%9B%E8%A1%8CBlog%E7%BC%96%E5%86%99/"/>
      <url>/2018/09/09/%E4%BD%BF%E7%94%A8MWeb%E9%85%8D%E5%90%88Hexo%E8%BF%9B%E8%A1%8CBlog%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<blockquote><p>目前用来作为功能测试，以后会进行归纳总结</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="插入图片设置"><a href="#插入图片设置" class="headerlink" title="插入图片设置"></a>插入图片设置</h2><p><img src="/images/post/sanpo-69306134.jpg" alt="sanpo-69306134-c"></p><a id="more"></a><blockquote><p>路径设定为 images/post<br>绝对路径（这个绝对与相对是基于引入文件夹的，如果引入的是存储Blog资源的文件夹(像我目前这样)，就设定为 <code>绝对路径</code>；如果引入的是整个Blog项目(例如 <code>NSDingFan.github.io</code>), 就使用相对路径）</p></blockquote>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 搭建 </tag>
            
            <tag> MWeb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>会对&quot;本地搜索&quot;功能出现影响的文本内容</title>
      <link href="/2018/09/08/sick-file/"/>
      <url>/2018/09/08/sick-file/</url>
      <content type="html"><![CDATA[<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><p><img src="/images/post/sick-file-error.png" alt=""></p><p>更新文章后, 搜索功能一直卡在加载状态, 切换到 <code>nsdf.top/search.xml</code> 页面,发现有以上错误提示.</p><a id="more"></a><h1 id="问题语句"><a href="#问题语句" class="headerlink" title="问题语句:"></a>问题语句:</h1><ul><li><p>有问题的语句:</p><p>  <a href="/code/problem-content.txt"><img src="/images/post/problem-file-view.png" alt="放在这个文件里了, 点击可以下载"></a></p><blockquote><p>点击图片可以下载这个文件</p></blockquote></li><li><p>没问题的语句:</p><p>  在打开一个新的项目文件夹时 就需要重新配置 launch.json 中的 cwd 参数</p></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>问题在于空格, 在有问题文本中,存在着编码错误的空格,如果你尝试删除这些空格,会发现在有两处空格位置需要删除两次才会消失, 这两个位置就是问题产生的原因.</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><ul><li><p>寻找一种可以重新将文本编码的方式</p></li><li><p>或者把有问题的文件改掉,参考:</p><ul><li><a href="http://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/" target="_blank" rel="noopener">http://www.itfanr.cc/2017/11/24/resolve-hexo-blog-search-exception/</a></li><li>使用Sublime或者vim,都可以很明显的看出问题在哪<br><img src="/images/post/sick-file.png" alt=""></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 搭建 </tag>
            
            <tag> hexo-local-search </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog搭建踩坑指南</title>
      <link href="/2018/09/07/blog%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
      <url>/2018/09/07/blog%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote><p>看，前面有个坑。    ─=≡Σ(((つ•̀ω•́)つ))</p></blockquote>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog 搭建 </tag>
            
            <tag> git </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-122.买卖股票的最佳时机 II | Best Time to Buy and Sell Stock II</title>
      <link href="/2018/09/03/best-time-to-buy-and-sell-stock-ii/"/>
      <url>/2018/09/03/best-time-to-buy-and-sell-stock-ii/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p><strong>示例 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure></p><p><strong>示例 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从题目中分析，要求只能保留<strong>一只</strong>股票，并且尽可能完成<strong>多</strong>的交易。</p><p>于是我开始尝试从从第一个低于第二天价格的位置买入，然后在第一个高于此价格的位置卖出，然<br>后再从下一个低于后续价格的位置买入，然后在最近的高于此价格位置卖出。经过计算，我发现按照这种方式，所有的买入和卖出操作都是发生在相邻元素的，也就是列表的 i和i+1位置。并且在计算了实例的三个用例后，结果符合预期。同时，这也符合 <a href="https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E6%B3%95" target="_blank" rel="noopener">贪心算法</a> 的思路。</p><!-- [^tanxin][^tanxin]: 贪心算法：是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。 --><p>进而得出结论，只要计算列表中所有相邻元素的差值，最大收益即为所有差值大于0的结果的和。</p><p>从列表长度方面分析，当列表为空，或者只有一个元素的时候，不满足买入卖出条件，所以可以在计算时先行排除。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    首先判断 prices长度是否小于2,</span></span><br><span class="line"><span class="string">    然后循环结算列表 i+1 与 i 的差, </span></span><br><span class="line"><span class="string">    并将大于0的结果累加。</span></span><br><span class="line"><span class="string">    最后返回累加结果,即为最大收益</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        max_profit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(prices) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> max_profit</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices) - <span class="number">1</span>):</span><br><span class="line">            profit = prices[i + <span class="number">1</span>] - prices[i]</span><br><span class="line">            <span class="keyword">if</span> profit &gt; <span class="number">0</span>:</span><br><span class="line">                max_profit += profit</span><br><span class="line">        <span class="keyword">return</span> max_profit</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N) ， 空间复杂度： O(1)</li></ul><p><img src="/images/post/bttbassii-2.jpg" alt=""></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>只是写了一个列表解析<a href="[一篇关于python列表解析的帖子](http://codingpy.com/article/python-list-comprehensions-explained-visually/){:target=&quot;_blank&quot;}">^jiexi</a>，一行完成。 实际性能不如方式一。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution2</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">解题思路与方式一相同，列表 i+1 与 i 元素相减，并将大于0的结果相加。</span></span><br><span class="line"><span class="string">只是改用了列表解析的方式，来写成一行。 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> int((sum(list((prices[i + <span class="number">1</span>] - prices[i]) + abs(prices[i + <span class="number">1</span>] - prices[i])<span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices) - <span class="number">1</span>)))) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N)，空间复杂度：O(N)</li></ul><p><img src="/images/post/bttbassii-1.jpg" alt=""></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>由于是刚开始接触算法题，最开始看到这道题的时候有些摸不着头脑。不知道从哪里入手，比如怎么找出差值最大的和，是先判断间隔为1的差值，在判断间隔为2的差值…<br>但是沉下心来，在纸上进行一些尝试后，找出适用于用例的计算方式，很快就找到了这个规律，直接找出相邻的差值即可。然后写成代码进行验证，符合预期。</p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 列表解析 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-219.存在重复元素 II | Contains Duplicate II</title>
      <link href="/2018/09/03/contains-duplicte-ii/"/>
      <url>/2018/09/03/contains-duplicte-ii/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/description/" target="_blank" rel="noopener">题目链接</a></p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,1], k = 3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><a id="more"></a> <p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,0,1,1], k = 1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,1,2,3], k = 2</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题，可以直接使用一个<strong>长度为k的哈希表</strong>即可解决问题。哈希表中只会保存不重复的内容，所以通过循环，按顺序每次向哈希表中添加一个列表元素，判断哈希表长度是否增长：如果增长，就将最早加入哈希表的元素删除，以保持哈希表长度位k；如果长度不变，即找到了列表中满足重复且索引差的绝对值最大为k的元素，题目结束。</p><p>这就相当与在一条数字组成的轨道上放置的一个长度为k的方框，只要判断框框范围内是否有重复即可，而不需要从一开始就找到所有重复元素。</p><p><strong>此外</strong>，还可以在程序开头，先行判断：</p><ol><li>列表是否存在重复</li><li>列表长度是否超过k</li></ol><p><strong>补充</strong>：<br>这道题也可以使用字典来实现类似哈希表的操作，用key存nums[i]的值,value 存 nums[i]的索引。每当发现重复元素时（if xx in dic），判断字典中对应key的 value值是与当前元素的索引值的差，如果符合!&gt;k 这个条件，即找到结果，反之则更新字典中key的value值。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>通过set来解决问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要使用 haseSet来解决问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        使用hash set 来判断 k长度的窗口中有无重复的数字</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断nums为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="comment"># 判断nums长度小于k的情况</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= k:</span><br><span class="line">            <span class="keyword">return</span> len(nums) &gt; len(set(nums))</span><br><span class="line">        <span class="comment"># 判断读取的前k个元素有无重复</span></span><br><span class="line">        hashset = set(nums[:k])</span><br><span class="line">        <span class="keyword">if</span> len(hashset) &lt; k:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># 循环判断,每次按顺序添加一个元素到set中,判断长度.如果为k,证明新加入的元素与set中的存在重复,条件成立.</span></span><br><span class="line">        <span class="comment"># 否则,就将set中最早加入的元素去掉, 由于set()后会改变原nums顺序,所以需要使用remove方法,按照添加顺序去除. 即nums[i-k]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k, len(nums)):</span><br><span class="line">            hashset.add(nums[i])</span><br><span class="line">            <span class="keyword">if</span> len(hashset) == k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashset.remove(nums[i - k])  <span class="comment"># 这里相当于去掉了nums的第一个元素,依次类推</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N), 空间复杂度 O(1)</li></ul><p><img src="/images/post/cdii-1.jpg" alt="cdii-1"><br><strong>beat 98.67 % 的 python3</strong></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>通过使用字典来解决问题,用key存nums[i]的值,value寸nums[i]的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#利用字典存储数据，以便查询，key为数字，value为对应索引</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> dic <span class="keyword">and</span> index - dic[value] &lt;= k:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[value] = index</span><br><span class="line">                <span class="comment"># Q: 如果发现重复的数字但是不满足k的条件,如何处理</span></span><br><span class="line">                <span class="comment"># A: dic使用value作为key,所以只会保留一个数字最新的索引,不满足条件就会被覆盖</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(N), 空间复杂度 O(N)</li></ul><h2 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h2><p>看到这道题时，首先想到的思路是分步进行操作：</p><ol><li>判断列表是否存在重复元素</li><li>找出重复的元素，并返回set()后的结果</li><li>找出每个重复元素在列表中的所有位置的索引</li><li>判断这些索引之间的差，是否存在 不超过k的结果。<br>我按照这个思路分块写出了代码后，逻辑没有任何问题，但是用时超出时间限制。</li></ol><p>经过分析和梳理，发现自己把简单问题复杂化了，上面使用的这个set(),就可以直接解决问题。</p><p>在练习算法题的时候，如果自己安装逻辑方式的解法不满足题目要求，尝试多动手在本子上画一画，或者说进行一些空间想象，可能会找出更好的方案。例如这道题，其实就像一个数组轨道上加一个长度为k的方框这样的东西。不需要考虑方框外的情况，只要确认方框内的数组满足条件即可。</p><p>最开始，想的很复杂的解决方式：<br><img src="/images/post/emmm.jpg" alt="emm"></p>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 列表 </tag>
            
            <tag> Python </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过MarkDown编写blog进阶技巧</title>
      <link href="/2018/08/26/%E9%80%9A%E8%BF%87markdown%E7%BC%96%E5%86%99blog%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/08/26/%E9%80%9A%E8%BF%87markdown%E7%BC%96%E5%86%99blog%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="在MarkDown中插入链接的一些技巧"><a href="#在MarkDown中插入链接的一些技巧" class="headerlink" title="在MarkDown中插入链接的一些技巧"></a>在MarkDown中插入链接的一些技巧</h2><h4 id="1-直接添加链接"><a href="#1-直接添加链接" class="headerlink" title="1. 直接添加链接"></a>1. 直接添加链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://nsdf.top/&gt;</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/" target="_blank" rel="noopener">http://nsdf.top/</a></p><h4 id="2-一般的链接"><a href="#2-一般的链接" class="headerlink" title="2. 一般的链接"></a>2. 一般的链接</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">丁帆的blog： [<span class="string">nsdf.top</span>](<span class="link">http://nsdf.top/</span>)</span><br><span class="line"></span><br><span class="line">丁帆的blog： [<span class="string">nsdf.top</span>](<span class="link">http://nsdf.top/ "丁帆的博客"</span>)</span><br></pre></td></tr></table></figure><p>丁帆的blog： <a href="http://nsdf.top/" target="_blank" rel="noopener">nsdf.top</a></p><p>丁帆的blog： <a href="http://nsdf.top/" title="丁帆的博客" target="_blank" rel="noopener">nsdf.top</a></p><a id="more"></a> <h4 id="3-相对链接"><a href="#3-相对链接" class="headerlink" title="3. 相对链接"></a>3. 相对链接</h4><p>链接至自己blog中的其他文章等内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[个人博客搭建踩坑指南](/2018/08/18/一些推荐的文章/)</span><br><span class="line">[封面图片](/img/post_bg_apple_ad.jpg)</span><br></pre></td></tr></table></figure></p><p><a href="/2018/08/18/一些推荐的文章/">个人博客搭建踩坑指南</a></p><p><a href="/img/post_bg_apple_ad.jpg">封面图片</a> </p><blockquote><p>注:此为Jekyll内容,待修改</p></blockquote><h4 id="4-在图片中嵌入链接"><a href="#4-在图片中嵌入链接" class="headerlink" title="4. 在图片中嵌入链接"></a>4. 在图片中嵌入链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![apple-touch-icon](/images/post/blog-logo.png))](http://nsdf.top/)</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/" target="_blank" rel="noopener"><img src="/images/post/blog-logo.png" alt="apple-touch-icon">)</a></p><blockquote><p>注: 此功能在基于Jekyll的blog中为点击图片前往链接;在基于Heox+NexT的blog中,为点击图片下方链接跳转.  !!!待修改</p></blockquote><h4 id="5-在新标签中打开连接"><a href="#5-在新标签中打开连接" class="headerlink" title="5. 在新标签中打开连接"></a>5. 在新标签中打开连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nsdf.top](http://nsdf.top/)&#123;:target=&quot;_blank&quot;&#125;</span><br></pre></td></tr></table></figure><p><a href="http://nsdf.top/" target="_blank" rel="noopener">nsdf.top</a>{:target=”_blank”}</p><blockquote><p>注: 在之前使用的基于Jekyll的Blog中,这个功能可用且需要. 在当前基于Heox+NexT的blog中,不需要这样写.</p></blockquote><h2 id="在MarkDown中插入视频"><a href="#在MarkDown中插入视频" class="headerlink" title="在MarkDown中插入视频"></a>在MarkDown中插入视频</h2><p>在MarkDown中，只要使用 <code>&lt;iframe&gt;</code> 标签就可以方便的插入视频了。</p><p>关于 <code>&lt;iframe&gt;</code> 的更多信息： <a href="http://www.w3school.com.cn/tags/tag_iframe.asp" target="_blank" rel="noopener">w3school-HTML-iframe 标签</a></p><p>下面的示例中，分别演示了插入 腾讯，优酷，YouTube，哔哩哔哩 这几个网站的视频的操作</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><h4 id="1-腾讯视频"><a href="#1-腾讯视频" class="headerlink" title="1. 腾讯视频"></a>1. 腾讯视频</h4><ol><li>打开一个视频，点击下方分享按钮，然后复制通用代码<br><img src="/images/post/tencent-video.jpg" alt=""></li></ol><ol start="2"><li><p>将复制的代码粘贴至MarkDown文件中。 这样就完成了。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"498"</span> <span class="attr">src</span>=<span class="string">"https://v.qq.com/iframe/player.html?vid=j0600cjxtp0&amp;tiny=0&amp;auto=0"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>另外，如果需要视频居中显示，可能还需要（视blog而定）添加一个<code>&lt;center&gt;</code>标签。</p></blockquote></li><li><p>最终效果如下：</p> <center><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=j0600cjxtp0&tiny=0&auto=0" allowfullscreen></iframe></center></li></ol><h4 id="2-优酷"><a href="#2-优酷" class="headerlink" title="2. 优酷"></a>2. 优酷</h4><ol><li><p>同样的，打开一个视频，点击分享，然后复制通用代码<br> <img src="/images/post/youku-video.jpg" alt=""></p></li><li><p>将代码粘贴至MarkDown文件中。就完成了</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XMTg0MTQ4NDk4OA=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>效果如下</p> <iframe height="498" width="510" src="http://player.youku.com/embed/XMTg0MTQ4NDk4OA==" frameborder="0" 'allowfullscreen'=""></iframe><blockquote><p>我发现在我常用的Safari以及chrome浏览器中，无法识别优酷的这种写法。于是我将代码改为了下面的写法，主要是将 height,width,frameborder 的数值加上双引号，将src链接改为双引号，最后将allowfullscreen单引号去掉 </p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">"498"</span> <span class="attr">width</span>=<span class="string">"510"</span> <span class="attr">src</span>=<span class="string">"http://player.youku.com/embed/XMTg0MTQ4NDk4OA=="</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>   <iframe height="498" width="510" src="http://player.youku.com/embed/XMTg0MTQ4NDk4OA==" frameborder="0" allowfullscreen></iframe><h4 id="3-YouTube"><a href="#3-YouTube" class="headerlink" title="3. YouTube"></a>3. YouTube</h4><ol><li>直接在视频上右击，选择复制嵌入代码，然后粘贴至MarkDown中即可。<br> <img src="/images/post/youtube-video.jpg" alt=""></li><li><p>效果如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;919&quot; height=&quot;525&quot; src=&quot;https://www.youtube.com/embed/LcGPI2tV2yY&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure> <iframe width="919" height="525" src="https://www.youtube.com/embed/LcGPI2tV2yY" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></li></ol><h4 id="4-哔哩哔哩"><a href="#4-哔哩哔哩" class="headerlink" title="4. 哔哩哔哩"></a>4. 哔哩哔哩</h4><ol><li>基本流程也一样，具体看下面截图就好了。需要注意的是，哔哩哔哩复制来的嵌入代码的src 缺少 <code>https:</code>，我需要补上这个，链接才会恢复正常。同时，还需要添加窗口尺寸等设置。</li><li><p>具体操作：</p><ul><li><p>在网站中复制嵌入代码：</p><p>  <img src="/images/post/Snip20180826_141.png" alt=""><br>  <img src="/images/post/Snip20180826_143.png" alt=""><br>  <img src="/images/post/Snip20180826_144.png" alt=""></p></li><li><p>修改复制到的嵌入代码：</p><ul><li><p>原本的：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=1031924&amp;cid=1494043&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改后:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://player.bilibili.com/player.html?aid=1031924&amp;cid=1494043&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>效果</p> <iframe width="640" height="498" src="https://player.bilibili.com/player.html?aid=1031924&cid=1494043&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></li></ol>]]></content>
      
      <categories>
          
          <category> 基于 Heox + NexT 的 blog 搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> iframe </tag>
            
            <tag> 链接跳转 </tag>
            
            <tag> 图片链接 </tag>
            
            <tag> blog技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VSCode 中使用 Python 异常报错 FileNotFoundError 的解决办法</title>
      <link href="/2018/08/18/vscod-python-filenotefounder/"/>
      <url>/2018/08/18/vscod-python-filenotefounder/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在vscode中使用Python,通过建立一个Python程序读取同一子目录下的txt文件, 并打印其内容.</p><h2 id="预期结果"><a href="#预期结果" class="headerlink" title="预期结果"></a>预期结果</h2><p>程序读取同一个子目录中的 <code>content.txt</code> 文件, 然后打印其内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stay hungry</span><br><span class="line">stay foolish</span><br></pre></td></tr></table></figure></p><h2 id="实际结果"><a href="#实际结果" class="headerlink" title="实际结果"></a>实际结果</h2><p>通过debug, 提示如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &apos;content.txt&apos;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><img src="/images/post/vscode_python_filenotefound_1.png" alt="vscode_python_filenotefound_1-c650"></p><h1 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h1><p>vscode在进行debug时,使用的路径并不是当前python文件所在的目录,而是固定为项目文件夹的根目录.所以当程序试图从根目录寻找此文件时,自然会报错.于是我进一步尝试将文本文件移动至项目的根目录,错误消失.<br>所以,解决问题的关键就是修改vscode在进行debug时使用的目录,使其自动的指向当前python文件所在目录.</p><p><img src="/images/post/vscode_python_filenotefound_2.png" alt="vscode_python_filenotefound_2-c650"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>初步思路是通过在 VSCode 的 Setting 中或者 debug 的配置文件中进行配置，来解决这个问题。通过 Google 后，我在 StackOverflow 上找到了具体解决方案。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h2><ul><li><a href="https://stackoverflow.com/questions/43801142/vscode-working-directory-when-debugging-python" target="_blank" rel="noopener">Stack Overflow - VSCode — how to set working directory for debug</a></li><li><a href="https://stackoverflow.com/questions/43801142/vscode-working-directory-when-debugging-python" target="_blank" rel="noopener">Stack Overflow - vscode working directory when debugging python</a></li></ul><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>点击vscode侧边的调试按钮,在出现的侧栏顶端找到设置按钮(图中齿轮图标), 点击打开 <code>launch.json</code> 文件, 在文件中找到当前所用调试的方式, 添加cwd配置 <code>&quot;cwd&quot;: &quot;&quot;</code>. (我这里使用的是 <code>Python: Terminal (integrated)</code>) 添加完成后, 在此debug程序, 发现错误消失.</p><p><img src="/images/post/vscode_python_filenotefound_3.png" alt="vscode_python_filenotefound_3-c650"></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>每次打开一个新的项目文件夹时, 都需要重新在<code>launch.json</code>文件中重新配置参数.</p>]]></content>
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FileNotFoundError </tag>
            
            <tag> cwd </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些值得推荐的内容</title>
      <link href="/2018/08/18/%E4%B8%80%E4%BA%9B%E6%8E%A8%E8%8D%90%E7%9A%84%E6%96%87%E7%AB%A0/"/>
      <url>/2018/08/18/%E4%B8%80%E4%BA%9B%E6%8E%A8%E8%8D%90%E7%9A%84%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h1><ul><li><p><a href="https://weibo.com/ibuick" target="_blank" rel="noopener">ibuick</a> - <a href="https://media.weibo.cn/article?id=2309404272684186896746" target="_blank" rel="noopener">macOS 与 external GPU (eGPU)</a></p><p>  非常详细的关于 macOS 下 外置显卡 (eGPU) 的设置，使用以及注意事项 的文章。</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 推荐 </tag>
            
            <tag> egpu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac 上使用 Visual Studio Code 进行 Python 开发</title>
      <link href="/2018/08/12/mac%E4%B8%8A%E4%BD%BF%E7%94%A8vscode%E8%BF%9B%E8%A1%8Cpython%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/12/mac%E4%B8%8A%E4%BD%BF%E7%94%A8vscode%E8%BF%9B%E8%A1%8Cpython%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<blockquote><p>在Visual Studio Code 的官方网站中，已经有在 VSCode 上使用 Python 的详细配置了， </p><p>链接：<a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="noopener">Python in Visual Studio Code</a>{:target=”_blank”}</p></blockquote><hr><h1 id="Python-的安装-macOS"><a href="#Python-的安装-macOS" class="headerlink" title="Python 的安装 (macOS)"></a>Python 的安装 (macOS)</h1><h2 id="检查已安装的-Python-版本"><a href="#检查已安装的-Python-版本" class="headerlink" title="检查已安装的 Python 版本"></a>检查已安装的 Python 版本</h2><ol><li><p>检查是否安装了python2</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 2.7.15 (default, Jun 17 2018, 12:46:58) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a> <ol start="2"><li><p>检查是否安装了python3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.6.6 (v3.6.6:4cf1f54eb7, Jun 26 2018, 19:50:54) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果得到以上输出，则表示对应的版本已安装。</p></blockquote><h2 id="使用-Homebrew-来安装-Python3"><a href="#使用-Homebrew-来安装-Python3" class="headerlink" title="使用 Homebrew 来安装 Python3"></a>使用 Homebrew 来安装 Python3</h2><ol><li><p>安装Homebrew<br> Homebrew依赖于Apple包Xcode，需要先进行安装。出现的对话框点OK即可。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure><p> 安装<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a>：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p> 确认Homebrew安装正确</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew doctor</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>安装Python3</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install python3</span><br></pre></td></tr></table></figure><p> 确认安装版本</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3 --version</span><br><span class="line">Python 3.6.6</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="VSCode-的配置"><a href="#VSCode-的配置" class="headerlink" title="VSCode 的配置"></a>VSCode 的配置</h1><h2 id="安装VSCode的Python扩展插件"><a href="#安装VSCode的Python扩展插件" class="headerlink" title="安装VSCode的Python扩展插件"></a>安装VSCode的Python扩展插件</h2><!--[](){:target="_blank"}--><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener"> <img src="/images/post/Snip20180812_10.png" alt="点击前往安装"></a><br>    点击图片下的链接可以前往安装，直接点击Install安装即可。或者也可以直接在VSCode的扩展栏（Shift + Command + X）中搜索Python，安装下载量最高的那个。安装完成后，就可以使用VSCode编辑python代码了，按F5即可进行debug。</p><h2 id="设置调试使用的-Python-版本"><a href="#设置调试使用的-Python-版本" class="headerlink" title="设置调试使用的 Python 版本"></a>设置调试使用的 Python 版本</h2><p>Mac上自带的 Python 版本为 2.7.x，VSCode 的调试（Python:Terminal(intergrated）)默认会使用系统自带的 Python 版本。而如果我们另外安装了 Python3，希望用 Python3 进行调试的时候，就需要修改一下  VSCode 的设置了。</p><p>设置步骤:</p><ol><li><p>打开VSCode用户设置（Code - 首选项 - 设置）    </p><p> <img src="/images/post/Snip20180812_12.png" alt=""></p></li><li><p>输入<code>&quot;python.pythonPath&quot;:&quot;python3&quot;,</code></p><p> <img src="/images/post/Snip20180812_15.png" alt=""></p></li></ol><hr><blockquote><p>以下两个插件需要预先安装<code>pip</code></p></blockquote><!--MarkDown 加锚点--><h2 id="配置yapf"><a href="#配置yapf" class="headerlink" title="配置yapf"></a>配置yapf</h2><ol><li><p>yapf简介<br> <a href="https://github.com/google/yapf" target="_blank" rel="noopener">yapf</a>{:target=”_blank”}是一个源代码格式化工具，可以辅助我们进行代码的格式化，安装完成后，通过快捷键 <code>Shift + Alt + F</code> 执行代码的格式化。</p></li><li><p>安装步骤</p><ol><li><p>打开命令行，输入 <code>pip install yapf</code></p></li><li><p>安装成功后， 打开VSCode用户设置（Code - 首选项 - 设置）</p><p> <img src="/images/post/Snip20180812_12.png" alt=""><br> 在<code>setting.json</code>文件中， 输入<code>&quot;python.formatting.provider&quot;: &quot;yapf&quot;,</code></p><p> <img src="/images/post/Snip20180812_14.png" alt=""></p></li></ol></li><li><p>yapf使用技巧</p><ol><li>设置 代码段禁用自动格式化<br> 通过 <code># yapf: disable</code> 以及 <code># yapf: enable</code>， 将不需要调整格式的代码段包括其中，即可在某些代码段禁用自动格式化。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yapf: disable</span><br><span class="line"># 这里的代码不会被自动调整格式</span><br><span class="line"># yapf: enable</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>2. 更多yafp用法参考    在终端中输入：`$ yapf -h`，查看相关帮助。</code></pre><h2 id="配置flake8"><a href="#配置flake8" class="headerlink" title="配置flake8"></a>配置flake8</h2><ol><li><p>flake8 简介</p><p> <a href="https://pypi.org/project/flake8/" target="_blank" rel="noopener">Flake8</a>{:target=”_blank”}包装了下列工具：</p><ul><li>PyFlakes：静态检查Python代码逻辑错误的工具。</li><li>pep8： 静态检查PEP 8编码风格的工具。</li><li>Ned Batchelder’s McCabe script：静态分析Python代码复杂度的工具。<br>通过flake8可以帮助我们避免以及查找错误，并规范格式。</li></ul></li><li><p>安装步骤：</p><ol><li>打开命令行，输入 <code>pip install flake8</code></li><li><p>打开VSCode用户设置（Code - 首选项 - 设置）</p><p> <img src="/images/post/Snip20180812_12.png" alt=""><br> 在<code>setting.json</code>文件中， 输入<code>&quot;python.linting.flake8Enabled&quot;:true,</code></p><p> <img src="/images/post/Snip20180812_13.png" alt=""></p></li></ol></li><li><p>flake8 的一些配置：</p><p> 如果我们的使用习惯和flake8的默认设定有冲突，可以对flake8进行配置。<br> 在控制台中，输入 <code>flake8 --help</code>， 会显示flake8可以设置的参数。我们可以在VSCode的Setting中对flake8的这些参数进行设置。<br> 在用户设置中添加 <code>&quot;python.linting.flake8Args&quot;: [],</code> 这条设置，并在其中添加需要修改的条目即可。<br> <img src="/images/post/Snip20180812_12.png" alt=""><br> <img src="/images/post/Snip20180822_5.png" alt=""></p><ol><li><p>调整flake8单行代码长度的检测：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 单行代码最大长度改为300</span><br><span class="line">&quot;python.linting.flake8Args&quot;: [&quot;--max-line-length=300&quot;]</span><br></pre></td></tr></table></figure></li></ol></li></ol><hr><h1 id="VSCode-的其他设置"><a href="#VSCode-的其他设置" class="headerlink" title="VSCode 的其他设置"></a>VSCode 的其他设置</h1><ol><li><p>设置代码长度</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 80，120 表示分别在80和120字符处显示一条辅助线，可以进行设置和调整。</span><br><span class="line">&quot;editor.rulers&quot;: [80,120]</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.pixiv.net/member.php?id=6675416" target="_blank" rel="noopener">post-image: pixiv-id-6675416</a>{:target=”_blank”}</li><li><a href="https://www.cnblogs.com/tangxin-blog/p/6065017.html" target="_blank" rel="noopener">vscode 编写python如何禁止 flake8 提示 line too long</a>{:target=”_blank”}</li><li><a href="https://book.douban.com/subject/26829016/" target="_blank" rel="noopener">《Python编程：从入门到实践》</a>{:target=”_blank”}</li></ul>]]></content>
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Python安装&amp;配置 </tag>
            
            <tag> yapf </tag>
            
            <tag> flake8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的第一篇Blog</title>
      <link href="/2018/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/07/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="Hey"><a href="#Hey" class="headerlink" title="Hey"></a>Hey</h2><blockquote><p>这是我的第一篇博客.</p></blockquote><center><br>从很早以前就希望可以有一个自己的个人博客, 但是由于种种原因, 一直到现在才付诸实施.<br><br>希望自己可以一直坚持下去, 不断改进自己的博客, 与它一起成长.<br><br>同时也希望我分享的内容, 能够帮到此刻正在看我博客的你.<br><br></center>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
